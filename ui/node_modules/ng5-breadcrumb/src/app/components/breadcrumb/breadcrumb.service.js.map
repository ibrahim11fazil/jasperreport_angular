{"version":3,"file":"breadcrumb.service.js","sourceRoot":"","sources":["../../../../../src/app/components/breadcrumb/breadcrumb.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class BreadcrumbService {\n\n    private routesFriendlyNames: Map<string, string> = new Map<string, string>();\n    private routesFriendlyNamesRegex: Map<string, string> = new Map<string, string>();\n    private routesWithCallback: Map<string, (string:string) => string> = new Map<string, (string:string) => string>();\n    private routesWithCallbackRegex: Map<string, (string:string) => string> = new Map<string, (string:string) => string>();\n    private hideRoutes: any = new Array<string>();\n    private hideRoutesRegex: any = new Array<string>();\n\n    /**\n     * Specify a friendly name for the corresponding route.\n     *\n     * @param route\n     * @param name\n     */\n    addFriendlyNameForRoute(route: string, name: string): void {\n        this.routesFriendlyNames.set(route, name);\n    }\n    \n    /**\n     * Specify a friendly name for the corresponding route matching a regular expression.\n     *\n     * @param route\n     * @param name\n     */\n    addFriendlyNameForRouteRegex(routeRegex: string, name: string): void {\n        this.routesFriendlyNamesRegex.set(routeRegex, name);\n    }\n    \n    /**\n     * Specify a callback for the corresponding route.\n     * When a mathing url is navigatedd to, the callback function is invoked to get the name to be displayed in the breadcrumb.\n     */\n    addCallbackForRoute(route: string, callback: (id: string) => string): void {\n        this.routesWithCallback.set(route, callback);\n    }\n    \n    /**\n     * Specify a callback for the corresponding route matching a regular expression.\n     * When a mathing url is navigatedd to, the callback function is invoked to get the name to be displayed in the breadcrumb.\n     */\n    addCallbackForRouteRegex(routeRegex: string, callback: (id: string) => string): void {\n        this.routesWithCallbackRegex.set(routeRegex, callback);\n    }\n\n    /**\n     * Show the friendly name for a given route (url). If no match is found the url (without the leading '/') is shown.\n     *\n     * @param route\n     * @returns {*}\n     */\n    getFriendlyNameForRoute(route: string): string {\n        let routeEnd = route.substr(route.lastIndexOf('/')+1, route.length);\n        let name: string = routeEnd;\n\n        this.routesFriendlyNames.forEach((value, key, map) => {\n            if (key === route) {\n                name = value;\n            }\n        });\n        \n        this.routesFriendlyNamesRegex.forEach((value, key, map) => {\n            if (new RegExp(key).exec(route)) {\n                name = value;\n            }\n        });\n        \n        this.routesWithCallback.forEach((value, key, map) => {\n            if (key === route) {\n                name = value(routeEnd);\n            }\n        });\n        \n        this.routesWithCallbackRegex.forEach((value, key, map) => {\n            if (new RegExp(key).exec(route)) {\n                name = value(routeEnd);\n            }\n        });\n\n        return name;\n    }\n    \n    /**\n     * Specify a route (url) that should not be shown in the breadcrumb.\n     */\n    hideRoute(route: string): void {\n        if (this.hideRoutes.indexOf(route) === -1) {\n            this.hideRoutes.push(route);\n        }\n    }\n    \n    /**\n     * Specify a route (url) regular expression that should not be shown in the breadcrumb.\n     */\n    hideRouteRegex(routeRegex: string): void {\n        if (this.hideRoutesRegex.indexOf(routeRegex) === -1) {\n            this.hideRoutesRegex.push(routeRegex);\n        }\n    }\n    \n    /**\n     * Returns true if a route should be hidden.\n     */\n    isRouteHidden(route: string): boolean {\n        let hide = this.hideRoutes.indexOf(route) > -1;\n        \n        this.hideRoutesRegex.forEach((value:any) => {\n            if (new RegExp(value).exec(route)) {\n                hide = true;\n            }\n        });\n        \n        return hide;\n    }\n}\n"]}