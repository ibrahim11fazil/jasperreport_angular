{"version":3,"sources":["webpack://typedjson/webpack/universalModuleDefinition","webpack://typedjson/webpack/bootstrap","webpack://typedjson/./src/typedjson/helpers.ts","webpack://typedjson/./src/typedjson/metadata.ts","webpack://typedjson/./src/typedjson/serializer.ts","webpack://typedjson/./src/typedjson/deserializer.ts","webpack://typedjson/./src/parser.ts","webpack://typedjson/./src/typedjson/json-object.ts","webpack://typedjson/./src/typedjson/json-member.ts","webpack://typedjson/./src/typedjson/json-array-member.ts","webpack://typedjson/./src/typedjson/json-set-member.ts","webpack://typedjson/./src/typedjson/json-map-member.ts","webpack://typedjson/./src/typedjson/to-json.ts","webpack://typedjson/./src/typedjson.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","METADATA_FIELD_KEY","isDirectlySerializableNativeType","type","Date","Number","String","Boolean","indexOf","isTypeTypedArray","Float32Array","Float64Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","parseToJSObject","json","expectedType","jsonStr","expectsTypesSerializedAsStrings","ArrayBuffer","DataView","hasQuotes","length","isInteger","test","trim","JSON","parse","isSubtypeOf","A","B","logError","message","optionalParams","_i","arguments","console","error","apply","concat","log","logWarning","warn","isValueDefined","isInstanceOf","constructor","isReflectMetadataSupported","Reflect","getMetadata","nameof","fn","metadata_JsonObjectMetadata","JsonObjectMetadata","classType","dataMembers","Map","knownTypes","Set","isExplicitlyMarked","isHandledWithoutAnnotation","getJsonObjectName","ctor","metadata","getFromConstructor","doesHandleWithoutAnnotation","primitiveMeta","getKnownTypeNameFromType","injectMetadataInformation","propKey","objectMetadata","decoratorName","deserializer","parentMetadata","forEach","_metadata","_propKey","set","configurable","writable","add","keyType","elementType","elemCtor","serializer_Serializer","Serializer","_typeHintEmitter","targetObject","sourceObject","expectedSourceType","sourceTypeMetadata","name_1","_errorHandler","setTypeHintEmitter","typeEmitterCallback","TypeError","setErrorHandler","errorHandlerCallback","convertSingleValue","typeInfo","memberName","selfType","convertAsArrayBuffer","convertAsDataView","Array","convertAsArray","elementTypes","convertAsSet","convertAsMap","convertAsTypedArray","convertAsObject","expectedName","actualName","_this","sourceMeta_1","memberMetadata","serializer","__assign","expectedElementType","element","expectedTypeName","actualTypeName","typeInfoForElements","slice","map","elementTypeInfo","resultArray","resultElement","push","expectedKeyType","keyTypeInfo","resultKeyValuePairObj","from","buffer","charCode","fromCharCode","join","dataView","deserializer_Deserializer","Deserializer","_typeResolver","__type","setNameResolver","nameResolverCallback","_nameResolver","setTypeResolver","typeResolverCallback","sourceObjectTypeInfo","objectName","expectedSelfType","selfConstructor","sourceObjectMetadata","knownTypeConstructors","_mergeKnownTypes","_createKnownTypesMap","typeFromTypeHint","sourceMetadata_1","sourceObjectWithDeserializedProperties_1","revivedValue","memberValue","memberNameForDebug","elementConstructor","keyConstructor","isRequired","initializerCallback","e","_instantiateType","assign","onDeserializedMethodName","targetObject_1","keys","sourceKey","srcTypeNameForDebug","_isDirectlyDeserializableNativeType","_makeTypeErrorMessage","_throwTypeMismatchError","every","elem","isNaN","_stringToArrayBuffer","_stringToDataView","resultSet","valueTypeInfo","resultMap","targetType","actualSourceType","actualType","knownTypeMaps","result","knowTypes","knownTypeMeta","convertNativeObject","str","buf","bufView","strLen","charCodeAt","parser_TypedJSON","TypedJSON","rootConstructor","settings","globalKnownTypes","indent","rootMetadata","nameResolver","errorHandler","config","_globalConfig","rootType","parseAsArray","dimensions","parseAsSet","parseAsMap","valueType","toPlainJson","toPlainArray","toPlainSet","stringifyAsSet","toPlainMap","keyCtor","valueCtor","stringifyAsMap","stringify","stringifyAsArray","setGlobalConfig","parser_assign","replacer","typeResolver","typeHintEmitter","knownType","filter","ktc","knownTypeCtor","fill","_mapKnownTypes","elementConstructorArray","undefined","constructors","jsonObject","optionsOrTarget","options","decorator","target","onDeserialized","initializer","knownTypeMethodName","jsonMember","propCtor","isSpecialPropertyType","emitDefaultValue","toString","reflectPropCtor","jsonArrayMember","elementCtor","jsonSetMember","jsonMapMember","valueConstructor","toJson","toJsonDecorator","overwrite","toJSON","Error","getPrototypeOf","__webpack_exports__"],"mappings":"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","file":"typedjson.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"typedjson\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"typedjson\"] = factory();\n\telse\n\t\troot[\"typedjson\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","declare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport const METADATA_FIELD_KEY = \"__typedJsonJsonObjectMetadataInformation__\";\n\nexport function getDefaultValue<T>(type: { new (): T }): T|undefined\n{\n    switch (type as any)\n    {\n        case Number:\n            return 0 as any;\n\n        case String:\n            return \"\" as any;\n\n        case Boolean:\n            return false as any;\n\n        case Array:\n            return [] as any;\n\n        default:\n            return undefined;\n    }\n}\n\n/**\n * Determines whether the specified type is a type that can be passed on \"as-is\" into `JSON.stringify`.\n * Values of these types don't need special conversion.\n * @param type The constructor of the type (wrapper constructor for primitive types, e.g. `Number` for `number`).\n */\nexport function isDirectlySerializableNativeType(type: Function): boolean\n{\n    return !!(~[Date, Number, String, Boolean].indexOf(type as any));\n}\n\nexport function isTypeTypedArray(type: Function): boolean\n{\n    return !!(~[Float32Array, Float64Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array]\n        .indexOf(type as any));\n}\n\nexport function isPrimitiveValue(obj: any): boolean\n{\n    switch (typeof obj)\n    {\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n            return true;\n        default:\n            return (obj instanceof String || obj instanceof Number || obj instanceof Boolean);\n    }\n}\n\nexport function isObject(value: any): value is Object\n{\n    return typeof value === \"object\";\n}\n\nfunction shouldOmitParseString(jsonStr: string, expectedType: Function): boolean {\n    const expectsTypesSerializedAsStrings = expectedType === String\n        || expectedType === ArrayBuffer\n        || expectedType === DataView;\n\n    const hasQuotes = jsonStr.length >= 2 && jsonStr[0] === '\"' && jsonStr[jsonStr.length-1] === '\"';\n    const isInteger = /^\\d+$/.test(jsonStr.trim());\n\n    return (expectsTypesSerializedAsStrings && !hasQuotes) || ((!hasQuotes && !isInteger) && expectedType === Date);\n}\n\nexport function parseToJSObject(json: any, expectedType: Function): Object {\n    if (typeof json !== 'string' || shouldOmitParseString(json, expectedType))\n    {\n      return json;\n    }\n    return JSON.parse(json);\n}\n\n/**\n * Determines if 'A' is a sub-type of 'B' (or if 'A' equals 'B').\n * @param A The supposed derived type.\n * @param B The supposed base type.\n */\nexport function isSubtypeOf(A: Function, B: Function)\n{\n    return A === B || A.prototype instanceof B;\n}\n\nexport function logError(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.error === \"function\")\n    {\n        console.error(message, ...optionalParams);\n    }\n    else if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log(`ERROR: ${message}`, ...optionalParams);\n    }\n}\n\nexport function logMessage(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log(message, ...optionalParams);\n    }\n}\n\nexport function logWarning(message?: any, ...optionalParams: any[])\n{\n    if (typeof console === \"object\" && typeof console.warn === \"function\")\n    {\n        console.warn(message, ...optionalParams);\n    } else if (typeof console === \"object\" && typeof console.log === \"function\")\n    {\n        console.log(`WARNING: ${message}`, ...optionalParams);\n    }\n}\n\n/**\n * Checks if the value is considered defined (not undefined and not null).\n * @param value\n */\nexport function isValueDefined<T>(value: T): value is Exclude<T, undefined | null>\n{\n    return !(typeof value === \"undefined\" || value === null);\n}\n\nexport function isInstanceOf<T>(value: any, constructor: Function): boolean\n{\n    if (typeof value === \"number\")\n    {\n        return (constructor === Number);\n    }\n    else if (typeof value === \"string\")\n    {\n        return (constructor === String);\n    }\n    else if (typeof value === \"boolean\")\n    {\n        return (constructor === Boolean);\n    }\n    else if (isObject(value))\n    {\n        return (value instanceof constructor);\n    }\n\n    return false;\n}\n\nexport const isReflectMetadataSupported =\n    (typeof Reflect === \"object\" && typeof Reflect.getMetadata === \"function\");\n\n/**\n * Gets the name of a function.\n * @param fn The function whose name to get.\n */\nexport function nameof(fn: Function & { name?: string })\n{\n    if (typeof fn.name === \"string\")\n    {\n        return fn.name;\n    }\n    else\n    {\n        return \"undefined\";\n    }\n}\n","import { nameof, logError, METADATA_FIELD_KEY, isDirectlySerializableNativeType, isTypeTypedArray } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\n\nexport interface JsonMemberMetadata\n{\n    /** If set, a default value will be emitted for uninitialized members. */\n    emitDefaultValue?: boolean;\n\n    /** Member name as it appears in the serialized JSON. */\n    name: string;\n\n    /** Property or field key of the json member. */\n    key: string;\n\n    /** Constuctor (type) reference of the member. */\n    ctor?: Function;\n\n    /** If set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** If the json member is an array, map or set, sets member options of elements/values. Subsequent values define the types of nested arrays. */\n    elementType?: Function[];\n\n    /** If the json member is a map, sets member options of array keys. */\n    keyType?: Function;\n\n    /** Custom deserializer to use. */\n    deserializer?: (json: any) => any;\n\n    /** Custom serializer to use. */\n    serializer?: (value: any) => any;\n}\n\nexport class JsonObjectMetadata\n{\n    //#region Static\n    /**\n     * Gets the name of a class as it appears in a serialized JSON string.\n     * @param ctor The constructor of a class (with or without jsonObject).\n     */\n    public static getJsonObjectName(ctor: Function): string\n    {\n        const metadata = JsonObjectMetadata.getFromConstructor(ctor);\n        return metadata ? nameof(metadata.classType) : nameof(ctor);\n    }\n\n    /**\n     * Gets jsonObject metadata information from a class.\n     * @param ctor The constructor class.\n     */\n    public static getFromConstructor(ctor: Function): JsonObjectMetadata|undefined\n    {\n        const prototype = ctor.prototype;\n        if (!prototype)\n        {\n            return;\n        }\n\n        let metadata: JsonObjectMetadata|undefined;\n        if (prototype.hasOwnProperty(METADATA_FIELD_KEY))\n        {\n            // The class prototype contains own jsonObject metadata\n            metadata = prototype[METADATA_FIELD_KEY];\n        }\n\n        // Ignore implicitly added jsonObject (through jsonMember)\n        if (metadata && metadata.isExplicitlyMarked)\n        {\n            return metadata;\n        }\n\n        // In the end maybe it is something which we can handle directly\n        if (JsonObjectMetadata.doesHandleWithoutAnnotation(ctor))\n        {\n            const primitiveMeta = new JsonObjectMetadata(ctor);\n            primitiveMeta.isExplicitlyMarked = true;\n            // we do not store the metadata here to not modify builtin prototype\n            return primitiveMeta;\n        }\n    }\n\n    /**\n     * Gets the known type name of a jsonObject class for type hint.\n     * @param constructor The constructor class.\n     */\n    public static getKnownTypeNameFromType(constructor: Function): string\n    {\n        const metadata = JsonObjectMetadata.getFromConstructor(constructor);\n        return metadata ? nameof(metadata.classType) : nameof(constructor);\n    }\n\n    private static doesHandleWithoutAnnotation(ctor: Function): boolean\n    {\n        return isDirectlySerializableNativeType(ctor) || isTypeTypedArray(ctor)\n            || ctor === DataView || ctor === ArrayBuffer;\n    }\n    //#endregion\n\n    constructor(\n        classType: Function,\n    ) {\n        this.classType = classType;\n    }\n\n    public dataMembers: Map<string, JsonMemberMetadata> = new Map<string, JsonMemberMetadata>();\n\n    public knownTypes: Set<Function> = new Set<Function>();\n\n    public knownTypeMethodName?: string;\n\n    /** Gets or sets the constructor function for the jsonObject. */\n    public classType: Function;\n\n    /**\n     * Indicates whether this class was explicitly annotated with @jsonObject\n     * or implicitly by @jsonMember\n     */\n    public isExplicitlyMarked: boolean = false;\n\n    /**\n     * Indicates whether this type is handled without annotation. This is usually\n     * used for the builtin types (except for Maps, Sets, and normal Arrays).\n     */\n    public isHandledWithoutAnnotation: boolean = false;\n\n    /** Name used to encode polymorphic type */\n    public name?: string;\n\n    public onDeserializedMethodName?: string;\n\n    public initializerCallback?: (sourceObject: Object, rawSourceObject: Object) => Object;\n}\n\nexport function injectMetadataInformation(constructor: IndexedObject, propKey: string | symbol, metadata: JsonMemberMetadata)\n{\n    const decoratorName = `@jsonMember on ${nameof(constructor.constructor)}.${String(propKey)}`; // For error messages.\n    let objectMetadata: JsonObjectMetadata;\n\n    // When a property decorator is applied to a static member, 'constructor' is a constructor function.\n    // See: https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Decorators.md#property-decorators\n    // ... and static members are not supported here, so abort.\n    if (typeof constructor === \"function\")\n    {\n        logError(`${decoratorName}: cannot use a static property.`);\n        return;\n    }\n\n    // Methods cannot be serialized.\n    // @ts-ignore symbol indexing is not supported by ts\n    if (typeof constructor[propKey] === \"function\")\n    {\n        logError(`${decoratorName}: cannot use a method property.`);\n        return;\n    }\n\n    if (!metadata || (!metadata.ctor && !metadata.deserializer))\n    {\n        logError(`${decoratorName}: JsonMemberMetadata has unknown ctor.`);\n        return;\n    }\n\n    // Add jsonObject metadata to 'constructor' if not yet exists ('constructor' is the prototype).\n    // NOTE: this will not fire up custom serialization, as 'constructor' must be explicitly marked with '@jsonObject' as well.\n    if (!constructor.hasOwnProperty(METADATA_FIELD_KEY))\n    {\n        // No *own* metadata, create new.\n        objectMetadata = new JsonObjectMetadata(constructor.constructor);\n\n        // Inherit @JsonMembers from parent @jsonObject (if any).\n        const parentMetadata: JsonObjectMetadata = constructor[METADATA_FIELD_KEY];\n        if (parentMetadata) // && !constructor.hasOwnProperty(Helpers.METADATA_FIELD_KEY)\n        {\n            parentMetadata.dataMembers.forEach((_metadata, _propKey) => objectMetadata.dataMembers.set(_propKey, _metadata));\n        }\n\n        // ('constructor' is the prototype of the involved class, metadata information is added to this class prototype).\n        Object.defineProperty(constructor, METADATA_FIELD_KEY, {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: objectMetadata\n        });\n    }\n    else\n    {\n        // JsonObjectMetadata already exists on 'constructor'.\n        objectMetadata = constructor[METADATA_FIELD_KEY];\n    }\n\n    if (!metadata.deserializer)\n    {\n        // @ts-ignore above is a check (!deser && !ctor)\n        objectMetadata.knownTypes.add(metadata.ctor);\n    }\n\n    if (metadata.keyType)\n        objectMetadata.knownTypes.add(metadata.keyType);\n\n    if (metadata.elementType)\n        metadata.elementType.forEach(elemCtor => objectMetadata.knownTypes.add(elemCtor));\n\n    objectMetadata.dataMembers.set(metadata.name, metadata);\n}\n","import { nameof, logError, isValueDefined, isInstanceOf, isTypeTypedArray, isDirectlySerializableNativeType } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\nimport { JsonObjectMetadata } from \"./metadata\";\n\nexport interface IScopeTypeInfo\n{\n    selfType: Function;\n    elementTypes?: Function[];\n    keyType?: Function;\n}\n\nexport interface IScopeArrayTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Array<any>;\n    elementTypes: Function[];\n}\n\nfunction isArrayTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeArrayTypeInfo {\n    return typeInfo.selfType === Array;\n}\n\nexport interface IScopeSetTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Set<any>;\n    elementTypes: [Function];\n}\n\nfunction isSetTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeSetTypeInfo {\n    return typeInfo.selfType === Set;\n}\n\nexport interface IScopeMapTypeInfo extends IScopeTypeInfo\n{\n    selfType: new () => Map<any, any>;\n    elementTypes: [Function];\n    keyType: Function;\n}\n\nfunction isMapTypeInfo(typeInfo: IScopeTypeInfo): typeInfo is IScopeMapTypeInfo {\n    return typeInfo.selfType === Map;\n}\n\n/**\n * Utility class, converts a typed object tree (i.e. a tree of class instances, arrays of class instances, and so on) to an untyped javascript object (also\n * called \"simple javascript object\"), and emits any necessary type hints in the process (for polymorphism).\n *\n * The converted object tree is what will be given to `JSON.stringify` to convert to string as the last step, the serialization is basically like:\n *\n * (1) typed object-tree -> (2) simple JS object-tree -> (3) JSON-string\n */\nexport class Serializer\n{\n    private _typeHintEmitter: (targetObject: IndexedObject, sourceObject: IndexedObject, expectedSourceType: Function, sourceTypeMetadata?: JsonObjectMetadata) => void;\n    private _errorHandler: (error: Error) => void;\n\n    constructor()\n    {\n        this._typeHintEmitter = (targetObject, sourceObject, expectedSourceType, sourceTypeMetadata?: JsonObjectMetadata) =>\n        {\n            // By default, we put a \"__type\" property on the output object if the actual object is not the same as the expected one, so that deserialization\n            // will know what to deserialize into (given the required known-types are defined, and the object is a valid subtype of the expected type).\n            if (sourceObject.constructor !== expectedSourceType)\n            {\n                const name = sourceTypeMetadata && sourceTypeMetadata.name\n                    ? sourceTypeMetadata.name\n                    : nameof(sourceObject.constructor);\n                // TODO: Perhaps this can work correctly without string-literal access?\n                // tslint:disable-next-line:no-string-literal\n                targetObject[\"__type\"] = name;\n            }\n        };\n\n        this._errorHandler = (error) => logError(error);\n    }\n\n    public setTypeHintEmitter(typeEmitterCallback: (targetObject: Object, sourceObject: Object, expectedSourceType: Function) => void)\n    {\n        if (typeof typeEmitterCallback !== \"function\")\n        {\n            throw new TypeError(\"'typeEmitterCallback' is not a function.\");\n        }\n\n        this._typeHintEmitter = typeEmitterCallback;\n    }\n\n    public setErrorHandler(errorHandlerCallback: (error: Error) => void)\n    {\n        if (typeof errorHandlerCallback !== \"function\")\n        {\n            throw new TypeError(\"'errorHandlerCallback' is not a function.\");\n        }\n\n        this._errorHandler = errorHandlerCallback;\n    }\n\n    /**\n     * Convert a value of any supported serializable type.\n     * The value type will be detected, and the correct serialization method will be called.\n     */\n    public convertSingleValue(sourceObject: any, typeInfo: IScopeTypeInfo, memberName: string = \"object\"): any\n    {\n        if (!isValueDefined(sourceObject)) return;\n\n        if (!isInstanceOf(sourceObject, typeInfo.selfType))\n        {\n            let expectedName = nameof(typeInfo.selfType);\n            let actualName = nameof(sourceObject.constructor);\n\n            this._errorHandler(new TypeError(`Could not serialize '${memberName}': expected '${expectedName}', got '${actualName}'.`));\n            return;\n        }\n\n        if (isDirectlySerializableNativeType(typeInfo.selfType))\n        {\n            return sourceObject;\n        }\n        else if (typeInfo.selfType === ArrayBuffer)\n        {\n            return this.convertAsArrayBuffer(sourceObject);\n        }\n        else if (typeInfo.selfType === DataView)\n        {\n            return this.convertAsDataView(sourceObject);\n        }\n        else if (isArrayTypeInfo(typeInfo))\n        {\n            return this.convertAsArray(sourceObject, typeInfo.elementTypes, memberName);\n        }\n        else if (isSetTypeInfo(typeInfo))\n        {\n            return this.convertAsSet(sourceObject, typeInfo.elementTypes[0], memberName);\n        }\n        else if (isMapTypeInfo(typeInfo))\n        {\n            return this.convertAsMap(sourceObject, typeInfo.keyType, typeInfo.elementTypes[0], memberName);\n        }\n        else if (isTypeTypedArray(typeInfo.selfType))\n        {\n            return this.convertAsTypedArray(sourceObject);\n        }\n        else if (typeof sourceObject === \"object\")\n        {\n            return this.convertAsObject(sourceObject, typeInfo, memberName);\n        }\n    }\n\n    /**\n     * Performs the conversion of a typed object (usually a class instance) to a simple javascript object for serialization.\n     */\n    public convertAsObject(sourceObject: IndexedObject, typeInfo: IScopeTypeInfo, memberName?: string)\n    {\n        let sourceTypeMetadata: JsonObjectMetadata|undefined;\n        let targetObject: IndexedObject;\n\n        if (sourceObject.constructor !== typeInfo.selfType && sourceObject instanceof typeInfo.selfType)\n        {\n            // The source object is not of the expected type, but it is a valid subtype.\n            // This is OK, and we'll proceed to gather object metadata from the subtype instead.\n            sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(sourceObject.constructor);\n        }\n        else\n        {\n            sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(typeInfo.selfType);\n        }\n\n        if (sourceTypeMetadata)\n        {\n            const sourceMeta = sourceTypeMetadata;\n            // Strong-typed serialization available.\n            // We'll serialize by members that have been marked with @jsonMember (including array/set/map members), and perform recursive conversion on\n            // each of them. The converted objects are put on the 'targetObject', which is what will be put into 'JSON.stringify' finally.\n            targetObject = {};\n\n            sourceTypeMetadata.dataMembers.forEach((memberMetadata) =>\n            {\n                if (memberMetadata.serializer) {\n                    targetObject[memberMetadata.name] =\n                        memberMetadata.serializer(sourceObject[memberMetadata.key]);\n                } else if (memberMetadata.ctor) {\n                    targetObject[memberMetadata.name] = this.convertSingleValue(\n                        sourceObject[memberMetadata.key],\n                        {\n                            selfType: memberMetadata.ctor,\n                            elementTypes: memberMetadata.elementType,\n                            keyType: memberMetadata.keyType,\n                        },\n                        `${nameof(sourceMeta.classType)}.${memberMetadata.key}`,\n                    );\n                } else {\n                    throw new TypeError(\n                        `Could not serialize ${memberMetadata.name}, there is`\n                        + ` no constructor nor serialization function to use.`,\n                    );\n                }\n            });\n        }\n        else\n        {\n            // Untyped serialization, \"as-is\", we'll just pass the object on.\n            // We'll clone the source object, because type hints are added to the object itself, and we don't want to modify to the original object.\n            targetObject = { ...sourceObject };\n        }\n\n        // Add type-hint.\n        this._typeHintEmitter(targetObject, sourceObject, typeInfo.selfType, sourceTypeMetadata);\n\n        return targetObject;\n    }\n\n    /**\n     * Performs the conversion of an array of typed objects (or primitive values) to an array of simple javascript objects (or primitive values) for\n     * serialization.\n     * @param expectedElementType The expected type of elements. If the array is supposed to be multi-dimensional, subsequent elements define lower dimensions.\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     */\n    public convertAsArray(sourceObject: any[], expectedElementType: Function[], memberName = \"object\"): any[]\n    {\n        if (expectedElementType.length === 0 || !expectedElementType[0])\n           throw new TypeError(`Could not serialize ${memberName} as Array: missing element type definition.`);\n\n        // Check the type of each element, individually.\n        // If at least one array element type is incorrect, we return undefined, which results in no value emitted during serialization.\n        // This is so that invalid element types don't unexpectedly alter the ordering of other, valid elements, and that no unexpected undefined values are in\n        // the emitted array.\n        sourceObject.forEach((element, i) =>\n        {\n            if (!isInstanceOf(element, expectedElementType[0]))\n            {\n                const expectedTypeName = nameof(expectedElementType[0]);\n                const actualTypeName = nameof(element.constructor);\n                throw new TypeError(`Could not serialize ${memberName}[${i}]: expected '${expectedTypeName}', got '${actualTypeName}'.`);\n            }\n        });\n\n        const typeInfoForElements: IScopeTypeInfo = {\n            selfType: expectedElementType[0],\n            elementTypes: expectedElementType.length > 1 ? expectedElementType.slice(1) : [], // For multidimensional arrays.\n        };\n\n        if (memberName)\n        {\n            // Just for debugging purposes.\n            memberName += \"[]\";\n        }\n\n        return sourceObject.map(element => this.convertSingleValue(element, typeInfoForElements, memberName));\n    }\n\n    /**\n     * Performs the conversion of a set of typed objects (or primitive values) into an array of simple javascript objects.\n     *\n     * @param sourceObject\n     * @param expectedElementType The constructor of the expected Set elements (e.g. `Number` for `Set<number>`, or `MyClass` for `Set<MyClass>`).\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     * @returns\n     */\n    public convertAsSet(sourceObject: Set<any>, expectedElementType: Function, memberName = \"object\"): any[]\n    {\n        if (!expectedElementType)\n            throw new TypeError(`Could not serialize ${memberName} as Set: missing element type definition.`);\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfType: expectedElementType,\n        };\n\n        // For debugging and error tracking.\n        if (memberName) memberName += \"[]\";\n\n        let resultArray: any[] = [];\n\n        // Convert each element of the set, and put it into an output array.\n        // The output array is the one serialized, as JSON.stringify does not support Set serialization. (TODO: clarification needed)\n        sourceObject.forEach(element =>\n        {\n            let resultElement = this.convertSingleValue(element, elementTypeInfo, memberName);\n\n            // Add to output if the source element was undefined, OR the converted element is defined. This will add intentionally undefined values to output,\n            // but not values that became undefined DURING serializing (usually because of a type-error).\n            if (!isValueDefined(element) || isValueDefined(resultElement))\n            {\n                resultArray.push(resultElement);\n            }\n        });\n\n        return resultArray;\n    }\n\n    /**\n     * Performs the conversion of a map of typed objects (or primitive values) into an array of simple javascript objects with `key` and `value` properties.\n     *\n     * @param sourceObject\n     * @param expectedKeyType The constructor of the expected Map keys (e.g. `Number` for `Map<number, any>`, or `MyClass` for `Map<MyClass, any>`).\n     * @param expectedElementType The constructor of the expected Map values (e.g. `Number` for `Map<any, number>`, or `MyClass` for `Map<any, MyClass>`).\n     * @param memberName Name of the object being serialized, used for debugging purposes.\n     */\n    public convertAsMap(sourceObject: Map<any, any>, expectedKeyType: Function, expectedElementType: Function, memberName = \"object\"): Array<{ key: any, value: any }>\n    {\n        if (!expectedElementType)\n            throw new TypeError(`Could not serialize ${memberName} as Map: missing value type definition.`);\n\n        if (!expectedKeyType)\n            throw new TypeError(`Could not serialize ${memberName} as Map: missing key type definition.`);\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfType: expectedElementType,\n            elementTypes: [expectedElementType]\n        };\n\n        let keyTypeInfo: IScopeTypeInfo = {\n            selfType: expectedKeyType\n        };\n\n        if (memberName) memberName += \"[]\";\n\n        let resultArray: Array<{ key: any, value: any }> = [];\n\n        // Convert each *entry* in the map to a simple javascript object with key and value properties.\n        sourceObject.forEach((value, key) =>\n        {\n            let resultKeyValuePairObj = {\n                key: this.convertSingleValue(key, keyTypeInfo, memberName),\n                value: this.convertSingleValue(value, elementTypeInfo, memberName)\n            };\n\n            // We are not going to emit entries with undefined keys OR undefined values.\n            if (isValueDefined(resultKeyValuePairObj.key) && isValueDefined(resultKeyValuePairObj.value))\n            {\n                resultArray.push(resultKeyValuePairObj);\n            }\n        });\n\n        return resultArray;\n    }\n\n    /**\n     * Performs the conversion of a typed javascript array to a simple untyped javascript array.\n     * This is needed because typed arrays are otherwise serialized as objects, so we'll end up with something like \"{ 0: 0, 1: 1, ... }\".\n     *\n     * @param sourceObject\n     * @returns\n     */\n    public convertAsTypedArray(sourceObject: ArrayBufferView)\n    {\n        return Array.from(sourceObject as any);\n    }\n\n    /**\n     * Performs the conversion of a raw ArrayBuffer to a string.\n     */\n    public convertAsArrayBuffer(buffer: ArrayBuffer)\n    {\n        // ArrayBuffer -> 16-bit character codes -> character array -> joined string.\n        return Array.from(new Uint16Array(buffer)).map(charCode => String.fromCharCode(charCode)).join(\"\");\n    }\n\n    /**\n     * Performs the conversion of DataView, converting its internal ArrayBuffer to a string and returning that string.\n     */\n    public convertAsDataView(dataView: DataView)\n    {\n        return this.convertAsArrayBuffer(dataView.buffer);\n    }\n}\n","import { nameof, logError, isSubtypeOf, isValueDefined } from \"./helpers\";\nimport { IndexedObject } from \"./types\";\nimport { JsonObjectMetadata } from \"./metadata\";\n\nexport interface IScopeTypeInfo\n{\n    selfConstructor: Function;\n    elementConstructor?: Function[];\n    keyConstructor?: Function;\n    knownTypes: Map<string, Function>;\n}\n\n/**\n * Utility class, converts a simple/untyped javascript object-tree to a typed object-tree.\n * It is used after parsing a JSON-string.\n */\nexport class Deserializer<T>\n{\n    private _typeResolver: (sourceObject: Object, knownTypes: Map<string, Function>) => Function|undefined;\n    private _nameResolver?: (ctor: Function) => string;\n    private _errorHandler: (error: Error) => void;\n\n    constructor()\n    {\n        this._typeResolver = (sourceObject: any, knownTypes: Map<string, Function>) =>\n        {\n            if (sourceObject.__type) return knownTypes.get(sourceObject.__type);\n        };\n\n        this._errorHandler = (error) => logError(error);\n    }\n\n    public setNameResolver(nameResolverCallback: (ctor: Function) => string)\n    {\n        this._nameResolver = nameResolverCallback;\n    }\n\n    public setTypeResolver(typeResolverCallback: (sourceObject: Object, knownTypes: Map<string, Function>) => Function)\n    {\n        if (typeof typeResolverCallback !== \"function\") throw new TypeError(\"'typeResolverCallback' is not a function.\");\n\n        this._typeResolver = typeResolverCallback;\n    }\n\n    public setErrorHandler(errorHandlerCallback: (error: Error) => void)\n    {\n        if (typeof errorHandlerCallback !== \"function\")\n        {\n            throw new TypeError(\"'errorHandlerCallback' is not a function.\");\n        }\n\n        this._errorHandler = errorHandlerCallback;\n    }\n\n    public convertAsObject(\n        sourceObject: IndexedObject,\n        sourceObjectTypeInfo: IScopeTypeInfo,\n        objectName = \"object\",\n    ) {\n        if (typeof sourceObject !== \"object\" || sourceObject === null)\n        {\n            this._errorHandler(new TypeError(`Cannot deserialize ${objectName}: 'sourceObject' must be a defined object.`));\n            return undefined;\n        }\n\n        let expectedSelfType = sourceObjectTypeInfo.selfConstructor;\n        let sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(expectedSelfType);\n        let knownTypeConstructors = sourceObjectTypeInfo.knownTypes;\n\n        if (sourceObjectMetadata)\n        {\n            // Merge known types received from \"above\" with known types defined on the current type.\n            knownTypeConstructors = this._mergeKnownTypes(\n                knownTypeConstructors,\n                this._createKnownTypesMap(sourceObjectMetadata.knownTypes),\n            );\n        }\n\n        // Check if a type-hint is available from the source object.\n        let typeFromTypeHint = this._typeResolver(sourceObject, knownTypeConstructors);\n\n        if (typeFromTypeHint)\n        {\n            // Check if type hint is a valid subtype of the expected source type.\n            if (isSubtypeOf(typeFromTypeHint, expectedSelfType))\n            {\n                // Hell yes.\n                expectedSelfType = typeFromTypeHint;\n                sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(typeFromTypeHint);\n\n                if (sourceObjectMetadata)\n                {\n                    // Also merge new known types from subtype.\n                    knownTypeConstructors = this._mergeKnownTypes(\n                        knownTypeConstructors,\n                        this._createKnownTypesMap(sourceObjectMetadata.knownTypes),\n                    );\n                }\n            }\n        }\n\n        if (sourceObjectMetadata && sourceObjectMetadata.isExplicitlyMarked)\n        {\n            const sourceMetadata = sourceObjectMetadata;\n            // Strong-typed deserialization available, get to it.\n            // First deserialize properties into a temporary object.\n            const sourceObjectWithDeserializedProperties = {} as IndexedObject;\n\n            // Deserialize by expected properties.\n            sourceMetadata.dataMembers.forEach((memberMetadata, propKey) =>\n            {\n                const memberValue = sourceObject[propKey];\n                const memberNameForDebug = `${nameof(sourceMetadata.classType)}.${propKey}`;\n\n                let revivedValue;\n                if (memberMetadata.deserializer) {\n                    revivedValue = memberMetadata.deserializer(memberValue);\n                } else if (memberMetadata.ctor) {\n                    revivedValue = this.convertSingleValue(\n                        memberValue,\n                        {\n                            selfConstructor: memberMetadata.ctor,\n                            elementConstructor: memberMetadata.elementType,\n                            keyConstructor: memberMetadata.keyType,\n                            knownTypes: knownTypeConstructors\n                        },\n                        memberNameForDebug,\n                    );\n                } else {\n                    throw new TypeError(\n                        `Cannot deserialize ${memberNameForDebug} thers is`\n                        + ` no constructor nor deserlization function to use.`,\n                    );\n                }\n\n                if (isValueDefined(revivedValue))\n                {\n                    sourceObjectWithDeserializedProperties[memberMetadata.key] = revivedValue;\n                }\n                else if (memberMetadata.isRequired)\n                {\n                    this._errorHandler(new TypeError(`Missing required member '${memberNameForDebug}'.`));\n                }\n            });\n\n            // Next, instantiate target object.\n            let targetObject: IndexedObject;\n\n            if (typeof sourceObjectMetadata.initializerCallback === \"function\")\n            {\n                try\n                {\n                    targetObject = sourceObjectMetadata.initializerCallback(\n                        sourceObjectWithDeserializedProperties,\n                        sourceObject,\n                    );\n\n                    // Check the validity of user-defined initializer callback.\n                    if (!targetObject)\n                    {\n                        throw new TypeError(\n                            `Cannot deserialize ${objectName}:`\n                            + ` 'initializer' function returned undefined/null`\n                            + `, but '${nameof(sourceObjectMetadata.classType)}' was expected.`,\n                        );\n                    }\n                    else if (!(targetObject instanceof sourceObjectMetadata.classType))\n                    {\n                        throw new TypeError(\n                            `Cannot deserialize ${objectName}:`\n                            + `'initializer' returned '${nameof(targetObject.constructor)}'`\n                            + `, but '${nameof(sourceObjectMetadata.classType)}' was expected,`\n                            + `and '${nameof(targetObject.constructor)}' is not a subtype of`\n                            + ` '${nameof(sourceObjectMetadata.classType)}'`,\n                        );\n                    }\n                }\n                catch (e)\n                {\n                    this._errorHandler(e);\n                    return undefined;\n                }\n            }\n            else\n            {\n                targetObject = this._instantiateType(expectedSelfType);\n            }\n\n            // Finally, assign deserialized properties to target object.\n            Object.assign(targetObject, sourceObjectWithDeserializedProperties);\n\n            // Call onDeserialized method (if any).\n            if (sourceObjectMetadata.onDeserializedMethodName)\n            {\n                if (typeof (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName] === \"function\")\n                {\n                    (targetObject.constructor as any)[sourceObjectMetadata.onDeserializedMethodName]();\n                }\n                else\n                {\n                    this._errorHandler(new TypeError(\n                        `onDeserialized callback '${nameof(sourceObjectMetadata.classType)}.${sourceObjectMetadata.onDeserializedMethodName}' is not a method.`\n                    ));\n                }\n            }\n\n            return targetObject;\n        }\n        else\n        {\n            // Untyped deserialization into Object instance.\n            let targetObject = {} as IndexedObject;\n\n            Object.keys(sourceObject).forEach(sourceKey =>\n            {\n                targetObject[sourceKey] = this.convertSingleValue(sourceObject[sourceKey], {\n                    selfConstructor: sourceObject[sourceKey].constructor,\n                    knownTypes: sourceObjectTypeInfo.knownTypes,\n                    elementConstructor: sourceObjectTypeInfo.elementConstructor,\n                    keyConstructor: sourceObjectTypeInfo.keyConstructor\n                }, sourceKey);\n            });\n\n            return targetObject;\n        }\n    }\n\n    public convertSingleValue(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\")\n    {\n        let expectedSelfType = typeInfo.selfConstructor;\n        let srcTypeNameForDebug = sourceObject ? nameof(sourceObject.constructor) : \"undefined\";\n\n        if (!isValueDefined(sourceObject))\n        {\n            return sourceObject;\n        }\n        else if (this._isDirectlyDeserializableNativeType(expectedSelfType))\n        {\n            if (sourceObject.constructor === expectedSelfType)\n            {\n                return sourceObject;\n            }\n            else\n            {\n                throw new TypeError(this._makeTypeErrorMessage(nameof(expectedSelfType), sourceObject.constructor, memberName));\n            }\n        }\n        else if (expectedSelfType === Date)\n        {\n            // Support for Date with ISO 8601 format, or with numeric timestamp (milliseconds elapsed since the Epoch).\n            // ISO 8601 spec.: https://www.w3.org/TR/NOTE-datetime\n\n            if (typeof sourceObject === \"string\" || (typeof sourceObject === \"number\" && sourceObject > 0))\n                return new Date(sourceObject as any);\n            else\n                this._throwTypeMismatchError(\"Date\", \"an ISO-8601 string\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Float32Array)\n        {\n            // Deserialize Float32Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Float32Array(sourceObject);\n            else\n                this._throwTypeMismatchError(\"Float32Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Float64Array)\n        {\n            // Deserialize Float64Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Float64Array(sourceObject);\n            else\n                this._throwTypeMismatchError(\"Float64Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint8Array)\n        {\n            // Deserialize Uint8Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint8Array(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint8Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint8ClampedArray)\n        {\n            // Deserialize Uint8Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint8ClampedArray(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint8ClampedArray\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint16Array)\n        {\n            // Deserialize Uint16Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint16Array(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint16Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Uint32Array)\n        {\n            // Deserialize Uint32Array from number[].\n\n            if (sourceObject instanceof Array && sourceObject.every(elem => !isNaN(elem)))\n                return new Uint32Array(sourceObject.map(value => ~~value));\n            else\n                this._throwTypeMismatchError(\"Uint32Array\", \"a numeric source array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === ArrayBuffer)\n        {\n            if (typeof sourceObject === \"string\")\n                return this._stringToArrayBuffer(sourceObject);\n            else\n                this._throwTypeMismatchError(\"ArrayBuffer\", \"a string source\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === DataView)\n        {\n            if (typeof sourceObject === \"string\")\n                return this._stringToDataView(sourceObject);\n            else\n                this._throwTypeMismatchError(\"DataView\", \"a string source\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Array)\n        {\n            if (sourceObject instanceof Array)\n                return this.convertAsArray(sourceObject, typeInfo, memberName);\n            else\n                throw new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName));\n        }\n        else if (expectedSelfType === Set)\n        {\n            if (sourceObject instanceof Array)\n                return this.convertAsSet(sourceObject, typeInfo, memberName);\n            else\n                this._throwTypeMismatchError(\"Set\", \"Array\", srcTypeNameForDebug, memberName);\n        }\n        else if (expectedSelfType === Map)\n        {\n            if (sourceObject instanceof Array)\n                return this.convertAsMap(sourceObject, typeInfo, memberName);\n            else\n                this._throwTypeMismatchError(\"Map\", \"a source array of key-value-pair objects\", srcTypeNameForDebug, memberName);\n        }\n        else if (sourceObject && typeof sourceObject === \"object\")\n        {\n            return this.convertAsObject(sourceObject, typeInfo, memberName);\n        }\n    }\n\n    public convertAsArray(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\"): any[]\n    {\n        if (!(sourceObject instanceof Array))\n        {\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n            return [];\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Array: missing constructor reference of Array elements.`));\n            return [];\n        }\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n\n        return sourceObject.map(element =>\n        {\n            // If an array element fails to deserialize, substitute with undefined. This is so that the original ordering is not interrupted by faulty\n            // entries, as an Array is ordered.\n            try\n            {\n                return this.convertSingleValue(element, elementTypeInfo);\n            }\n            catch (e)\n            {\n                this._errorHandler(e);\n\n                // Keep filling the array here with undefined to keep original ordering.\n                // Note: this is just aesthetics, not returning anything produces the same result.\n                return undefined;\n            }\n        });\n    }\n\n    public convertAsSet(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\")\n    {\n        if (!(sourceObject instanceof Array))\n        {\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n            return new Set<any>();\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Set: missing constructor reference of Set elements.`));\n            return new Set<any>();\n        }\n\n        let elementTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n        let resultSet = new Set<any>();\n\n        sourceObject.forEach((element, i) =>\n        {\n            try\n            {\n                resultSet.add(this.convertSingleValue(element, elementTypeInfo, memberName + `[${i}]`));\n            }\n            catch (e)\n            {\n                // Faulty entries are skipped, because a Set is not ordered, and skipping an entry does not affect others.\n                this._errorHandler(e);\n            }\n        });\n\n        return resultSet;\n    }\n\n    public convertAsMap(sourceObject: any, typeInfo: IScopeTypeInfo, memberName = \"object\")\n    {\n        if (!(sourceObject instanceof Array))\n            this._errorHandler(new TypeError(this._makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n\n        if (!typeInfo.keyConstructor)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Map: missing key constructor.`));\n            return new Map<any, any>();\n        }\n\n        if (!typeInfo.elementConstructor || !typeInfo.elementConstructor.length)\n        {\n            this._errorHandler(new TypeError(`Could not deserialize ${memberName} as Map: missing value constructor.`));\n            return new Map<any, any>();\n        }\n\n        let keyTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.keyConstructor,\n            knownTypes: typeInfo.knownTypes\n        };\n\n        let valueTypeInfo: IScopeTypeInfo = {\n            selfConstructor: typeInfo.elementConstructor[0],\n            elementConstructor: (typeInfo.elementConstructor.length > 1) ? typeInfo.elementConstructor.slice(1) : [],\n            knownTypes: typeInfo.knownTypes\n        };\n\n        let resultMap = new Map<any, any>();\n\n        sourceObject.forEach((element: any) =>\n        {\n            try\n            {\n                let key = this.convertSingleValue(element.key, keyTypeInfo);\n\n                // Undefined/null keys not supported, skip if so.\n                if (isValueDefined(key))\n                {\n                    resultMap.set(key, this.convertSingleValue(\n                        element.value, valueTypeInfo, `${memberName}[${key}]`,\n                    ));\n                }\n            }\n            catch (e)\n            {\n                // Faulty entries are skipped, because a Map is not ordered,\n                // and skipping an entry does not affect others.\n                this._errorHandler(e);\n            }\n        });\n\n        return resultMap;\n    }\n\n    private _throwTypeMismatchError(\n        targetType: string,\n        expectedSourceType: string,\n        actualSourceType: string,\n        memberName: string = \"object\",\n    ) {\n        throw new TypeError(\n            `Could not deserialize ${memberName} as ${targetType}:`\n            + ` expected ${expectedSourceType}, got ${actualSourceType}.`,\n        );\n    }\n\n    private _makeTypeErrorMessage(expectedType: Function | string, actualType: Function | string, memberName = \"object\")\n    {\n        let expectedTypeName = (typeof expectedType === \"function\") ? nameof(expectedType) : expectedType;\n        let actualTypeName = (typeof actualType === \"function\") ? nameof(actualType) : actualType;\n\n        return `Could not deserialize ${memberName}: expected '${expectedTypeName}', got '${actualTypeName}'.`;\n    }\n\n    private _instantiateType(ctor: any)\n    {\n        return new ctor();\n    }\n\n    private _mergeKnownTypes(...knownTypeMaps: Array<Map<string, Function>>)\n    {\n        let result = new Map<string, Function>();\n\n        knownTypeMaps.forEach(knownTypes =>\n        {\n            knownTypes.forEach((ctor, name) =>\n            {\n                if (this._nameResolver)\n                {\n                    result.set(this._nameResolver(ctor), ctor);\n                }\n                else\n                {\n                    result.set(name, ctor);\n                }\n            });\n        });\n\n        return result;\n    }\n\n    private _createKnownTypesMap(knowTypes: Set<Function>)\n    {\n        const map = new Map<string, Function>();\n\n        knowTypes.forEach(ctor =>\n        {\n            if (this._nameResolver)\n            {\n                map.set(this._nameResolver(ctor), ctor);\n            }\n            else\n            {\n                const knownTypeMeta = JsonObjectMetadata.getFromConstructor(ctor);\n                const name = knownTypeMeta && knownTypeMeta.isExplicitlyMarked && knownTypeMeta.name\n                    ? knownTypeMeta.name\n                    : ctor.name;\n                map.set(name, ctor);\n            }\n        });\n\n        return map;\n    }\n\n    private _isDirectlyDeserializableNativeType(ctor: any)\n    {\n        return ~([Number, String, Boolean].indexOf(ctor));\n    }\n\n    public convertNativeObject(sourceObject: any)\n    {\n        return sourceObject;\n    }\n\n    private _stringToArrayBuffer(str: string)\n    {\n        let buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        let bufView = new Uint16Array(buf);\n\n        for (let i = 0, strLen = str.length; i < strLen; i++)\n        {\n            bufView[i] = str.charCodeAt(i);\n        }\n\n        return buf;\n    }\n\n    private _stringToDataView(str: string)\n    {\n        return new DataView(this._stringToArrayBuffer(str));\n    }\n}\n","import { Constructor } from \"./typedjson/types\";\nimport { Serializer } from \"./typedjson/serializer\";\nimport { Deserializer } from \"./typedjson/deserializer\";\nimport { JsonObjectMetadata } from \"./typedjson/metadata\";\nimport { logError, logWarning, nameof, parseToJSObject } from \"./typedjson/helpers\";\n\nexport type JsonTypes = Object|boolean|string|number|null|undefined;\n\nexport interface ITypedJSONSettings\n{\n    /**\n     * Sets the handler callback to invoke on errors during serializing and deserializing.\n     * Re-throwing errors in this function will halt serialization/deserialization.\n     * The default behavior is to log errors to the console.\n     */\n    errorHandler?: (e: Error) => void;\n\n    /**\n     * Sets a callback that determines the constructor of the correct sub-type of polymorphic\n     * objects while deserializing.\n     * The default behavior is to read the type-name from the '__type' property of 'sourceObject',\n     * and look it up in 'knownTypes'.\n     * The constructor of the sub-type should be returned.\n     */\n    typeResolver?: (sourceObject: Object, knownTypes: Map<string, Function>) => Function;\n\n    nameResolver?: (ctor: Function) => string;\n\n    /**\n     * Sets a callback that writes type-hints to serialized objects.\n     * The default behavior is to write the type-name to the '__type' property, if a derived type\n     * is present in place of a base type.\n     */\n    typeHintEmitter?:\n        (targetObject: Object, sourceObject: Object, expectedSourceType: Function) => void;\n\n    /**\n     * Sets the amount of indentation to use in produced JSON strings.\n     * Default value is 0, or no indentation.\n     */\n    indent?: number;\n\n    replacer?: (key: string, value: any) => any;\n\n    knownTypes?: Array<Constructor<any>>;\n}\n\nexport class TypedJSON<T>\n{\n    //#region Static\n    public static parse<T>(\n        object: any, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): T|undefined {\n        return new TypedJSON(rootType, settings).parse(object);\n    }\n\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: 1\n    ): T[];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 2\n    ): T[][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 3\n    ): T[][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 4\n    ): T[][][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings: ITypedJSONSettings|undefined,\n        dimensions: 5\n    ): T[][][][][];\n    public static parseAsArray<T>(\n        object: any,\n        elementType: Constructor<T>,\n        settings?: ITypedJSONSettings,\n        dimensions?: number\n    ): any[] {\n        return new TypedJSON(elementType, settings).parseAsArray(object, dimensions as any);\n    }\n\n    public static parseAsSet<T>(\n        object: any, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): Set<T> {\n        return new TypedJSON(elementType, settings).parseAsSet(object);\n    }\n\n    public static parseAsMap<K, V>(\n        object: any,\n        keyType: Constructor<K>,\n        valueType: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): Map<K, V> {\n        return new TypedJSON(valueType, settings).parseAsMap(object, keyType);\n    }\n\n    public static toPlainJson<T>(\n        object: T, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): JsonTypes {\n        return new TypedJSON(rootType, settings).toPlainJson(object);\n    }\n\n    public static toPlainArray<T>(\n        object: T[], elementType: Constructor<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): Object[];\n    public static toPlainArray<T>(\n        object: T[][], elementType: Constructor<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): Object[][];\n    public static toPlainArray<T>(\n        object: T[][][], elementType: Constructor<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): Object[][][];\n    public static toPlainArray<T>(\n        object: T[][][][], elementType: Constructor<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): Object[][][][];\n    public static toPlainArray<T>(\n        object: T[][][][][], elementType: Constructor<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): Object[][][][][];\n    public static toPlainArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): any[];\n    public static toPlainArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions?: any, settings?: ITypedJSONSettings,\n    ): any[] {\n        return new TypedJSON(elementType, settings).toPlainArray(object, dimensions);\n    }\n\n    public static toPlainSet<T>(\n        object: Set<T>, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsSet(object);\n    }\n\n    public static toPlainMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Constructor<K>,\n        valueCtor: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(valueCtor, settings).stringifyAsMap(object, keyCtor);\n    }\n\n    public static stringify<T>(\n        object: T, rootType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(rootType, settings).stringify(object);\n    }\n\n    public static stringifyAsArray<T>(\n        object: T[], elementType: Constructor<T>, dimensions?: 1, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][], elementType: Constructor<T>, dimensions: 2, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][], elementType: Constructor<T>, dimensions: 3, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][][], elementType: Constructor<T>, dimensions: 4, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: T[][][][][], elementType: Constructor<T>, dimensions: 5, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions: number, settings?: ITypedJSONSettings,\n    ): string;\n    public static stringifyAsArray<T>(\n        object: any[], elementType: Constructor<T>, dimensions?: any, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsArray(object, dimensions);\n    }\n\n    public static stringifyAsSet<T>(\n        object: Set<T>, elementType: Constructor<T>, settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(elementType, settings).stringifyAsSet(object);\n    }\n\n    public static stringifyAsMap<K, V>(\n        object: Map<K, V>,\n        keyCtor: Constructor<K>,\n        valueCtor: Constructor<V>,\n        settings?: ITypedJSONSettings,\n    ): string {\n        return new TypedJSON(valueCtor, settings).stringifyAsMap(object, keyCtor);\n    }\n\n    private static _globalConfig: ITypedJSONSettings;\n\n    public static setGlobalConfig(config: ITypedJSONSettings)\n    {\n        if (this._globalConfig)\n        {\n            Object.assign(this._globalConfig, config);\n        }\n        else\n        {\n            this._globalConfig = config;\n        }\n    }\n\n    //#endregion\n\n    private serializer: Serializer = new Serializer();\n    private deserializer: Deserializer<T> = new Deserializer<T>();\n    private globalKnownTypes: Array<Constructor<any>> = [];\n    private indent: number = 0;\n    private rootConstructor: Constructor<T>;\n    private errorHandler: (e: Error) => void;\n    private nameResolver: (ctor: Function) => string;\n    private replacer?: (key: string, value: any) => any;\n\n    /**\n     * Creates a new TypedJSON instance to serialize (stringify) and deserialize (parse) object\n     *     instances of the specified root class type.\n     * @param rootType The constructor of the root class type.\n     * @param settings Additional configuration settings.\n     */\n    constructor(rootConstructor: Constructor<T>, settings?: ITypedJSONSettings)\n    {\n        let rootMetadata = JsonObjectMetadata.getFromConstructor(rootConstructor);\n\n        if (!rootMetadata || (!rootMetadata.isExplicitlyMarked && !rootMetadata.isHandledWithoutAnnotation))\n        {\n            throw new TypeError(\"The TypedJSON root data type must have the @jsonObject decorator used.\");\n        }\n\n        this.nameResolver = (ctor) => nameof(ctor);\n        this.rootConstructor = rootConstructor;\n        this.errorHandler = (error) => logError(error);\n\n        if (settings)\n        {\n            this.config(settings);\n        }\n        else if (TypedJSON._globalConfig)\n        {\n            this.config({});\n        }\n    }\n\n    /**\n     * Configures TypedJSON through a settings object.\n     * @param settings The configuration settings object.\n     */\n    public config(settings: ITypedJSONSettings)\n    {\n        if (TypedJSON._globalConfig)\n        {\n            settings = {\n                ...TypedJSON._globalConfig,\n                ...settings\n            };\n\n            if (settings.knownTypes && TypedJSON._globalConfig.knownTypes)\n            {\n                // Merge known-types (also de-duplicate them, so Array -> Set -> Array).\n                settings.knownTypes = Array.from(new Set(\n                    settings.knownTypes.concat(TypedJSON._globalConfig.knownTypes),\n                ));\n            }\n        }\n\n        if (settings.errorHandler)\n        {\n            this.errorHandler = settings.errorHandler;\n            this.deserializer.setErrorHandler(settings.errorHandler);\n            this.serializer.setErrorHandler(settings.errorHandler);\n        }\n\n        if (settings.replacer) this.replacer = settings.replacer;\n        if (settings.typeResolver) this.deserializer.setTypeResolver(settings.typeResolver);\n        if (settings.typeHintEmitter) this.serializer.setTypeHintEmitter(settings.typeHintEmitter);\n        if (settings.indent) this.indent = settings.indent;\n\n        if (settings.nameResolver)\n        {\n            this.nameResolver = settings.nameResolver;\n            this.deserializer.setNameResolver(settings.nameResolver);\n            // this.serializer.set\n        }\n\n        if (settings.knownTypes)\n        {\n            // Type-check knownTypes elements to recognize errors in advance.\n            settings.knownTypes.forEach((knownType, i) =>\n            {\n                // tslint:disable-next-line:no-null-keyword\n                if (typeof knownType === \"undefined\" || knownType === null)\n                {\n                    logWarning(\n                        `TypedJSON.config: 'knownTypes' contains an undefined/null value (element ${i}).`);\n                }\n            });\n\n            this.globalKnownTypes = settings.knownTypes;\n        }\n    }\n\n    /**\n     * Converts a JSON string to the root class type.\n     * @param object The JSON to parse and convert.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns Deserialized T or undefined if there were errors.\n     */\n    public parse(object: any): T|undefined\n    {\n        const json = parseToJSObject(object, this.rootConstructor);\n\n        let rootMetadata = JsonObjectMetadata.getFromConstructor(this.rootConstructor);\n        let result: T|undefined;\n        let knownTypes = new Map<string, Function>();\n\n        this.globalKnownTypes.filter(ktc => ktc).forEach(knownTypeCtor =>\n        {\n            knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n        });\n\n        if (rootMetadata)\n        {\n            rootMetadata.knownTypes.forEach(knownTypeCtor =>\n            {\n                knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n            });\n        }\n\n        try\n        {\n            result = this.deserializer.convertSingleValue(json, {\n                selfConstructor: this.rootConstructor,\n                knownTypes: knownTypes,\n            }) as T;\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n\n        return result;\n    }\n\n    public parseAsArray(object: any, dimensions?: 1): T[];\n    public parseAsArray(object: any, dimensions: 2): T[][];\n    public parseAsArray(object: any, dimensions: 3): T[][][];\n    public parseAsArray(object: any, dimensions: 4): T[][][][];\n    public parseAsArray(object: any, dimensions: 5): T[][][][][];\n    public parseAsArray(object: any, dimensions: number): any[];\n    public parseAsArray(object: any, dimensions: number = 1): any[]\n    {\n        const json = parseToJSObject(object, Array);\n        if (json instanceof Array)\n        {\n            return this.deserializer.convertAsArray(json, {\n                selfConstructor: Array,\n                elementConstructor: new Array(dimensions - 1)\n                    .fill(Array)\n                    .concat(this.rootConstructor),\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes),\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define an Array`\n                + `, but got ${typeof json}.`));\n        }\n\n        return [];\n    }\n\n    public parseAsSet(object: any): Set<T>\n    {\n        const json = parseToJSObject(object, Set);\n        // A Set<T> is serialized as T[].\n        if (json instanceof Array)\n        {\n            return this.deserializer.convertAsSet(json, {\n                selfConstructor: Array,\n                elementConstructor: [this.rootConstructor],\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes)\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define a Set (using an Array)`\n                + `, but got ${typeof json}.`,\n            ));\n        }\n\n        return new Set<T>();\n    }\n\n    public parseAsMap<K>(object: any, keyConstructor: Constructor<K>): Map<K, T>\n    {\n        const json = parseToJSObject(object, Map);\n        // A Set<T> is serialized as T[].\n        if (json instanceof Array)\n        {\n            return this.deserializer.convertAsMap(json, {\n                selfConstructor: Array,\n                elementConstructor: [this.rootConstructor],\n                knownTypes: this._mapKnownTypes(this.globalKnownTypes),\n                keyConstructor: keyConstructor\n            });\n        }\n        else\n        {\n            this.errorHandler(new TypeError(`Expected 'json' to define a Set (using an Array)`\n                + `, but got ${typeof json}.`,\n            ));\n        }\n\n        return new Map<K, T>();\n    }\n\n    /**\n     * Converts an instance of the specified class type to a plain JSON object.\n     * @param object The instance to convert to a JSON string.\n     * @returns Serialized object or undefined if an error has occured.\n     */\n    public toPlainJson(object: T): JsonTypes\n    {\n        try\n        {\n            return this.serializer.convertSingleValue(object, {\n                selfType: this.rootConstructor\n            });\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainArray(object: T[], dimensions?: 1): Object[];\n    public toPlainArray(object: T[][], dimensions: 2): Object[][];\n    public toPlainArray(object: T[][][], dimensions: 3): Object[][][];\n    public toPlainArray(object: T[][][][], dimensions: 4): Object[][][][];\n    public toPlainArray(object: T[][][][][], dimensions: 5): Object[][][][][];\n    public toPlainArray(object: any[], dimensions: 1|2|3|4|5 = 1): Object[]|undefined\n    {\n        try\n        {\n            const elementConstructorArray =\n                new Array(dimensions - 1).fill(Array).concat(this.rootConstructor);\n            return this.serializer.convertAsArray(object, elementConstructorArray);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainSet(object: Set<T>): Object[]|undefined\n    {\n        try\n        {\n            return this.serializer.convertAsSet(object, this.rootConstructor);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    public toPlainMap<K>(object: Map<K, T>, keyConstructor: Constructor<K>): { key: any, value: any }[]|undefined\n    {\n        try\n        {\n            return this.serializer.convertAsMap(object, keyConstructor, this.rootConstructor);\n        }\n        catch (e)\n        {\n            this.errorHandler(e);\n        }\n    }\n\n    /**\n     * Converts an instance of the specified class type to a JSON string.\n     * @param object The instance to convert to a JSON string.\n     * @throws Error if any errors are thrown in the specified errorHandler callback (re-thrown).\n     * @returns String with the serialized object or an empty string if an error has occured, but\n     *     the errorHandler did not throw.\n     */\n    public stringify(object: T): string\n    {\n        const result = this.toPlainJson(object);\n        if (result === undefined) {\n            return '';\n        }\n        return JSON.stringify(result, this.replacer, this.indent);\n    }\n\n    public stringifyAsArray(object: T[], dimensions?: 1): string;\n    public stringifyAsArray(object: T[][], dimensions: 2): string;\n    public stringifyAsArray(object: T[][][], dimensions: 3): string;\n    public stringifyAsArray(object: T[][][][], dimensions: 4): string;\n    public stringifyAsArray(object: T[][][][][], dimensions: 5): string;\n    public stringifyAsArray(object: any[], dimensions: any): string\n    {\n        return JSON.stringify(this.toPlainArray(object, dimensions), this.replacer, this.indent);\n    }\n\n    public stringifyAsSet(object: Set<T>): string\n    {\n        return JSON.stringify(this.toPlainSet(object), this.replacer, this.indent);\n    }\n\n    public stringifyAsMap<K>(object: Map<K, T>, keyConstructor: Constructor<K>): string\n    {\n        return JSON.stringify(this.toPlainMap(object, keyConstructor), this.replacer, this.indent);\n    }\n\n    private _mapKnownTypes(constructors: Array<Constructor<any>>)\n    {\n        let map = new Map<string, Constructor<any>>();\n\n        constructors.filter(ctor => ctor).forEach(ctor => map.set(this.nameResolver(ctor), ctor));\n\n        return map;\n    }\n}\n","import { Constructor, ParameterlessConstructor } from \"./types\";\nimport { METADATA_FIELD_KEY } from \"./helpers\";\nimport { JsonObjectMetadata } from \"./metadata\";\n\nexport interface IJsonObjectOptionsBase\n{\n    /**\n     * An array of known types to recognize when encountering type-hints,\n     * or the name of a static method used for determining known types.\n     */\n    knownTypes?: Function[] | string;\n\n    /**\n     * The name of a static or instance method to call when deserialization\n     * of the object is completed.\n     */\n    onDeserialized?: string;\n\n    /**\n     * The name used to differentiate between different polymorphic types.\n     */\n    name?: string;\n}\n\nexport interface IJsonObjectOptionsWithInitializer<T> extends IJsonObjectOptionsBase\n{\n    /**\n     * The name of a static method to call before deserializing and initializing the object, accepting two arguments: (1) sourceObject, an 'Object' instance\n     * with all properties already deserialized, and (2) rawSourceObject, a raw 'Object' instance representation of the current object in the serialized JSON\n     * (i.e. without deserialized properties).\n     */\n    initializer: (sourceObject: T, rawSourceObject: T) => T;\n}\n\nexport interface IJsonObjectOptions<T> extends IJsonObjectOptionsBase\n{\n    /**\n     * The name of a static method to call before deserializing and initializing the object, accepting two arguments: (1) sourceObject, an 'Object' instance\n     * with all properties already deserialized, and (2) rawSourceObject, a raw 'Object' instance representation of the current object in the serialized JSON\n     * (i.e. without deserialized properties).\n     */\n    initializer?: (sourceObject: T, rawSourceObject: T) => T;\n}\n\n/**\n * Marks that a class with a parameterized constructor is serializable using TypedJSON, with additional settings. The 'initializer' setting must be specified.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptionsWithInitializer<T>): (target: Constructor<T>) => void;\n\n/**\n * Marks that a class is serializable using TypedJSON, with additional settings.\n * @param options Configuration settings.\n */\nexport function jsonObject<T>(options?: IJsonObjectOptions<T>): (target: ParameterlessConstructor<T>) => void;\n\n/**\n * Marks that a class with a parameterless constructor is serializable using TypedJSON.\n */\nexport function jsonObject<T>(target: ParameterlessConstructor<T>): void;\n\nexport function jsonObject<T extends Object>(optionsOrTarget?: IJsonObjectOptions<T> | Constructor<T>\n): ((target: Constructor<T>) => void) | void {\n    let options: IJsonObjectOptions<T>;\n\n    if (typeof optionsOrTarget === \"function\")\n    {\n        // jsonObject is being used as a decorator, directly.\n        options = {};\n    }\n    else\n    {\n        // jsonObject is being used as a decorator factory.\n        options = optionsOrTarget || {};\n    }\n\n    function decorator(\n        target: Function\n    ): void {\n        let objectMetadata: JsonObjectMetadata;\n\n        // Create or obtain JsonObjectMetadata object.\n        if (!target.prototype.hasOwnProperty(METADATA_FIELD_KEY))\n        {\n            // Target has no JsonObjectMetadata associated with it yet, create it now.\n            objectMetadata = new JsonObjectMetadata(target);\n\n            // Inherit json members and known types from parent @jsonObject (if any).\n            const parentMetadata: JsonObjectMetadata = target.prototype[METADATA_FIELD_KEY];\n            if (parentMetadata)\n            {\n                parentMetadata.dataMembers\n                    .forEach((memberMetadata, propKey) =>\n                        objectMetadata.dataMembers.set(propKey, memberMetadata));\n                parentMetadata.knownTypes\n                    .forEach((knownType) => objectMetadata.knownTypes.add(knownType));\n            }\n\n            Object.defineProperty(target.prototype, METADATA_FIELD_KEY, {\n                enumerable: false,\n                configurable: false,\n                writable: false,\n                value: objectMetadata\n            });\n        }\n        else\n        {\n            // Target already has JsonObjectMetadata associated with it.\n            objectMetadata = target.prototype[METADATA_FIELD_KEY];\n            objectMetadata.classType = target;\n        }\n\n        // Fill JsonObjectMetadata.\n        objectMetadata.isExplicitlyMarked = true;\n        objectMetadata.onDeserializedMethodName = options.onDeserialized;\n        // T extend Object so it is fine\n        objectMetadata.initializerCallback = options.initializer as any;\n        if (options.name)\n        {\n            objectMetadata.name = options.name;\n        }\n\n        // Obtain known-types.\n        if (typeof options.knownTypes === \"string\")\n        {\n            objectMetadata.knownTypeMethodName = options.knownTypes;\n        }\n        else if (options.knownTypes instanceof Array)\n        {\n            options.knownTypes\n                .filter(knownType => !!knownType)\n                .forEach(knownType => objectMetadata.knownTypes.add(knownType));\n        }\n    }\n\n    if (typeof optionsOrTarget === \"function\")\n    {\n        // jsonObject is being used as a decorator, directly.\n        decorator(optionsOrTarget);\n    }\n    else\n    {\n        // jsonObject is being used as a decorator factory.\n        return decorator;\n    }\n}\n","import {\n    nameof, logError, isReflectMetadataSupported, isValueDefined, logWarning, isSubtypeOf\n} from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMemberOptions\n{\n    /**\n     * Sets the constructor of the property.\n     * Optional with ReflectDecorators.\n     */\n    constructor?: Function;\n\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted if the property is uninitialized/undefined. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name. */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property is part of the object when serializing, with additional options.\n * Omitting the 'constructor' option requires ReflectDecorators and that the property type is always explicitly declared.\n * @param options Additional options.\n */\nexport function jsonMember<TFunction extends Function>(options: IJsonMemberOptions): PropertyDecorator;\n\n/**\n * Specifies that a property is part of the object when serializing.\n * This call signature requires ReflectDecorators and that the property type is always explicitly declared.\n */\nexport function jsonMember(target: Object, propertyKey: string | symbol): void;\n\nexport function jsonMember<TFunction extends Function>(optionsOrTarget?: IJsonMemberOptions | Object, propKey?: string | symbol): PropertyDecorator | void\n{\n    if (optionsOrTarget instanceof Object && (typeof propKey === \"string\" || typeof propKey === \"symbol\"))\n    {\n        const target = optionsOrTarget as Object;\n        // For error messages.\n        const decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(propKey)}`;\n\n        // jsonMember used directly, no additional information directly available besides target and propKey.\n        // Obtain property constructor through ReflectDecorators.\n        if (isReflectMetadataSupported)\n        {\n            const reflectPropCtor = Reflect.getMetadata(\"design:type\", target, propKey) as Function;\n\n            if (!reflectPropCtor)\n            {\n                logError(`${decoratorName}: could not resolve detected property constructor at runtime.`);\n                return;\n            }\n\n            if (isSpecialPropertyType(decoratorName, reflectPropCtor))\n            {\n                return;\n            }\n\n            injectMetadataInformation(target, propKey, {\n                ctor: reflectPropCtor,\n                key: propKey.toString(),\n                name: propKey.toString(),\n            });\n        }\n        else\n        {\n            logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n            return;\n        }\n    }\n    else\n    {\n        // jsonMember used as a decorator factory.\n        return (target: Object, _propKey: string | symbol) =>\n        {\n            let options: IJsonMemberOptions = optionsOrTarget || {};\n            let propCtor: Function|undefined;\n            let decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(_propKey)}`; // For error messages.\n\n            if (options.hasOwnProperty(\"constructor\"))\n            {\n                if (!isValueDefined(options.constructor))\n                {\n                    logError(`${decoratorName}: cannot resolve specified property constructor at runtime.`);\n                    return;\n                }\n\n                // Property constructor has been specified. Use ReflectDecorators (if available) to check whether that constructor is correct. Warn if not.\n                if (isReflectMetadataSupported && !isSubtypeOf(options.constructor, Reflect.getMetadata(\"design:type\", target, _propKey)))\n                {\n                    logWarning(`${decoratorName}: detected property type does not match 'constructor' option.`);\n                }\n\n                propCtor = options.constructor;\n            }\n            else\n            {\n                // Use ReflectDecorators to obtain property constructor.\n                if (isReflectMetadataSupported)\n                {\n                    propCtor = Reflect.getMetadata(\"design:type\", target, _propKey) as Function;\n\n                    if (!propCtor)\n                    {\n                        logError(`${decoratorName}: cannot resolve detected property constructor at runtime.`);\n                        return;\n                    }\n                }\n                else if (!options.deserializer)\n                {\n                    logError(`${decoratorName}: ReflectDecorators is required if no 'constructor' option is specified.`);\n                    return;\n                }\n            }\n\n            if (isSpecialPropertyType(decoratorName, propCtor))\n            {\n                return;\n            }\n\n            injectMetadataInformation(target, _propKey, {\n                ctor: propCtor,\n                emitDefaultValue: options.emitDefaultValue || false,\n                isRequired: options.isRequired || false,\n                key: _propKey.toString(),\n                name: options.name || _propKey.toString(),\n                deserializer: options.deserializer,\n                serializer: options.serializer,\n            });\n        };\n    }\n}\n\nfunction isSpecialPropertyType(decoratorName: string, propCtor?: Function)\n{\n    if (propCtor === Array)\n    {\n        logError(`${decoratorName}: property is an Array. Use the jsonArrayMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (propCtor === Set)\n    {\n        logError(`${decoratorName}: property is a Set. Use the jsonSetMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    if (propCtor === Map)\n    {\n        logError(`${decoratorName}: property is a Map. Use the jsonMapMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n\n    return false;\n}\n","import { nameof, logError, isReflectMetadataSupported } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonArrayMemberOptions\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, an empty array is emitted if the property is undefined/uninitialized. */\n    emitDefaultValue?: boolean;\n\n    /** Sets array dimensions (e.g. 1 for 'number[]' or 2 for 'number[][]'). Defaults to 1. */\n    dimensions?: number;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that a property, of type array, is part of an object when serializing.\n * @param elementConstructor Constructor of array elements (e.g. 'Number' for 'number[]', or 'Date' for 'Date[]').\n * @param options Additional options.\n */\nexport function jsonArrayMember(elementConstructor: Function, options: IJsonArrayMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        let decoratorName = `@jsonArrayMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof elementConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of array elements at runtime.`);\n            return;\n        }\n\n        const dimensions = options.dimensions === undefined ? 1 : options.dimensions;\n        if (!isNaN(dimensions) && dimensions < 1)\n        {\n            logError(`${decoratorName}: 'dimensions' option must be at least 1.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonArrayMember' has been used on an array.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Array)\n        {\n            logError(`${decoratorName}: property is not an Array.`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Array,\n            elementType: createArrayElementType(elementConstructor, dimensions),\n            emitDefaultValue: options.emitDefaultValue || false,\n            isRequired: options.isRequired || false,\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n\nfunction createArrayElementType(elementCtor: Function, dimensions: number) {\n    const elementTypes = new Array(dimensions).fill(Array, 0, -1);\n    elementTypes[dimensions-1] = elementCtor;\n    return elementTypes;\n}\n","import { nameof } from \"./helpers\";\nimport { IJsonMemberOptions } from \"./json-member\";\nimport { JsonMemberMetadata, JsonObjectMetadata, injectMetadataInformation } from \"./metadata\";\nimport * as Helpers from \"./helpers\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonSetMemberOptions\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Set<T>.\n * @param elementConstructor Constructor of set elements (e.g. 'Number' for Set<number> or 'Date' for Set<Date>).\n * @param options Additional options.\n */\nexport function jsonSetMember(elementConstructor: Function, options: IJsonSetMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        var decoratorName = `@jsonSetMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof elementConstructor !== \"function\")\n        {\n            Helpers.logError(`${decoratorName}: could not resolve constructor of set elements at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonSetMember' has been used on a set. Warn if not.\n        if (Helpers.isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Set)\n        {\n            Helpers.logError(`${decoratorName}: property is not a Set.`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Set,\n            elementType: [elementConstructor],\n            emitDefaultValue: options.emitDefaultValue || false,\n            isRequired: options.isRequired || false,\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import { nameof, logError, isReflectMetadataSupported } from \"./helpers\";\nimport { injectMetadataInformation } from \"./metadata\";\n\ndeclare abstract class Reflect\n{\n    public static getMetadata(metadataKey: string, target: any, targetKey: string | symbol): any;\n}\n\nexport interface IJsonMapMemberOptions\n{\n    /** When set, indicates that the member must be present when deserializing. */\n    isRequired?: boolean;\n\n    /** When set, a default value is emitted for each uninitialized json member. */\n    emitDefaultValue?: boolean;\n\n    /** When set, the key on the JSON that should be used instead of the class property name */\n    name?: string;\n\n    /** When set, this deserializer will be used to deserialize the member. The callee must assure the correct type. */\n    deserializer?: (json: any) => any;\n\n    /** When set, this serializer will be used to serialize the member. */\n    serializer?: (value: any) => any;\n}\n\n/**\n * Specifies that the property is part of the object when serializing.\n * Use this decorator on properties of type Map<K, V>.\n * @param keyConstructor Constructor of map keys (e.g. 'Number' for 'Map<number, Date>').\n * @param valueConstructor Constructor of map values (e.g. 'Date' for 'Map<number, Date>').\n * @param options Additional options.\n */\nexport function jsonMapMember(keyConstructor: Function, valueConstructor: Function, options: IJsonMapMemberOptions = {})\n{\n    return (target: Object, propKey: string | symbol) =>\n    {\n        let decoratorName = `@jsonMapMember on ${nameof(target.constructor)}.${String(propKey)}`; // For error messages.\n\n        if (typeof keyConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of map keys at runtime.`);\n            return;\n        }\n\n        if (typeof valueConstructor !== \"function\")\n        {\n            logError(`${decoratorName}: could not resolve constructor of map values at runtime.`);\n            return;\n        }\n\n        // If ReflectDecorators is available, use it to check whether 'jsonMapMember' has been used on a map. Warn if not.\n        if (isReflectMetadataSupported && Reflect.getMetadata(\"design:type\", target, propKey) !== Map)\n        {\n            logError(`${decoratorName}: property is not a Map.`);\n            return;\n        }\n\n        injectMetadataInformation(target, propKey, {\n            ctor: Map,\n            elementType: [valueConstructor],\n            keyType: keyConstructor,\n            emitDefaultValue: options.emitDefaultValue || false,\n            isRequired: options.isRequired || false,\n            key: propKey.toString(),\n            name: options.name || propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\n","import { TypedJSON } from \"../parser\";\n\n/**\n * Options for the @toJson decorator.\n */\nexport interface IToJsonOptions {\n    /**\n     * When set to true it will overwrite any toJSON already existing on the prototype.\n     */\n    overwrite?: boolean;\n}\n\n/**\n * Decorator that will generate toJSON function on the class prototype that allows\n * JSON.stringify to be used instead of TypedJSON.stringify. Under the hood it will\n * simply delegate to TypedJSON.\n * By default it will throw if the prototype already has a toJSON function defined.\n * @param target the class which prototype should be modified.\n */\nexport function toJson<T extends Object>(target: Function): void;\n/**\n * Decorator factory that accepts the options interface.\n * @param options for configuring the toJSON creation.\n */\nexport function toJson<T extends Object>(options: IToJsonOptions): ((target: Function) => void);\nexport function toJson<T extends Object>(optionsOrTarget: IToJsonOptions | Function\n): ((target: Function) => void) | void {\n    if (typeof optionsOrTarget === 'function') {\n        // used directly\n        toJsonDecorator(optionsOrTarget, {});\n        return;\n    }\n    // used as a factory\n    return (target: Function) => {\n        toJsonDecorator(target, optionsOrTarget);\n    }\n}\n\nfunction toJsonDecorator<T extends Object>(target: Function, options: IToJsonOptions): void {\n    if (!options.overwrite && target.prototype.toJSON) {\n        throw new Error(`${target.name} already has toJSON defined!`);\n    }\n    target.prototype.toJSON = function () {\n        return TypedJSON.toPlainJson(this, Object.getPrototypeOf(this).constructor);\n    }\n}\n","export { TypedJSON, ITypedJSONSettings, JsonTypes } from \"./parser\";\nexport { jsonObject } from \"./typedjson/json-object\";\nexport { jsonMember } from \"./typedjson/json-member\";\nexport { jsonArrayMember } from \"./typedjson/json-array-member\";\nexport { jsonSetMember } from \"./typedjson/json-set-member\";\nexport { jsonMapMember } from \"./typedjson/json-map-member\";\nexport { toJson } from \"./typedjson/to-json\";\n"],"sourceRoot":""}