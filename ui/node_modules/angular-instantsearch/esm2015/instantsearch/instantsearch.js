/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, Inject, PLATFORM_ID, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as algoliasearchProxy from 'algoliasearch/lite';
import instantsearch from 'instantsearch.js/es';
import { VERSION } from '../version';
/** @type {?} */
const algoliasearch = algoliasearchProxy.default || algoliasearchProxy;
/**
 * @record
 */
export function SearchRequestParameters() { }
if (false) {
    /** @type {?} */
    SearchRequestParameters.prototype.query;
}
/**
 * @record
 */
export function SearchForFacetValuesRequestParameters() { }
if (false) {
    /** @type {?} */
    SearchForFacetValuesRequestParameters.prototype.facetQuery;
    /** @type {?} */
    SearchForFacetValuesRequestParameters.prototype.facetName;
}
export class InstantSearchInstance {
}
if (false) {
    /** @type {?} */
    InstantSearchInstance.prototype.start;
    /** @type {?} */
    InstantSearchInstance.prototype.addWidget;
    /** @type {?} */
    InstantSearchInstance.prototype.addWidgets;
    /** @type {?} */
    InstantSearchInstance.prototype.removeWidget;
    /** @type {?} */
    InstantSearchInstance.prototype.removeWidgets;
    /** @type {?} */
    InstantSearchInstance.prototype.on;
    /** @type {?} */
    InstantSearchInstance.prototype.removeListener;
    /** @type {?} */
    InstantSearchInstance.prototype.helper;
    /** @type {?} */
    InstantSearchInstance.prototype.refresh;
    /** @type {?} */
    InstantSearchInstance.prototype.dispose;
}
export class NgAisInstantSearch {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
        this.instanceName = 'default';
        this.change = new EventEmitter();
        this.onRender = () => {
            this.change.emit({
                results: this.instantSearchInstance.helper.lastResults,
                state: this.instantSearchInstance.helper.state,
            });
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createInstantSearchInstance(this.config);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.instantSearchInstance.start();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.instantSearchInstance.removeListener('render', this.onRender);
        this.instantSearchInstance.dispose();
    }
    /**
     * @param {?} config
     * @return {?}
     */
    createInstantSearchInstance(config) {
        // add default searchParameters with highlighting config
        if (!config.searchParameters)
            config.searchParameters = {};
        Object.assign(config.searchParameters, {
            highlightPreTag: '__ais-highlight__',
            highlightPostTag: '__/ais-highlight__',
        });
        // remove URLSync widget if on SSR
        if (!isPlatformBrowser(this.platformId)) {
            if (typeof config.urlSync !== 'undefined')
                delete config.urlSync;
            if (typeof config.routing !== 'undefined')
                delete config.routing;
        }
        // custom algolia client agent
        if (!config.searchClient && !config.createAlgoliaClient) {
            /** @type {?} */
            const client = algoliasearch(config.appId, config.apiKey);
            client.addAlgoliaAgent(`angular-instantsearch ${VERSION}`);
            config.searchClient = client;
            config.appId = undefined;
            config.apiKey = undefined;
        }
        this.instantSearchInstance = instantsearch(config);
        this.instantSearchInstance.on('render', this.onRender);
    }
    /**
     * @param {?} widget
     * @return {?}
     */
    addWidget(widget) {
        this.instantSearchInstance.addWidget(widget);
    }
    /**
     * @param {?} widget
     * @return {?}
     */
    removeWidget(widget) {
        this.instantSearchInstance.removeWidget(widget);
    }
    /**
     * @return {?}
     */
    refresh() {
        this.instantSearchInstance.refresh();
    }
}
NgAisInstantSearch.decorators = [
    { type: Component, args: [{
                selector: 'ais-instantsearch',
                template: `<ng-content></ng-content>`,
            },] },
];
/** @nocollapse */
NgAisInstantSearch.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
NgAisInstantSearch.propDecorators = {
    config: [{ type: Input }],
    instanceName: [{ type: Input }],
    change: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NgAisInstantSearch.prototype.config;
    /** @type {?} */
    NgAisInstantSearch.prototype.instanceName;
    /** @type {?} */
    NgAisInstantSearch.prototype.change;
    /** @type {?} */
    NgAisInstantSearch.prototype.instantSearchInstance;
    /** @type {?} */
    NgAisInstantSearch.prototype.onRender;
    /**
     * @type {?}
     * @private
     */
    NgAisInstantSearch.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFudHNlYXJjaC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImluc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxLQUFLLEVBR0wsTUFBTSxFQUNOLFlBQVksRUFDWixNQUFNLEVBQ04sV0FBVyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXBELE9BQU8sS0FBSyxrQkFBa0IsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLGFBQWEsTUFBTSxxQkFBcUIsQ0FBQztBQUloRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDOztNQUUvQixhQUFhLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxJQUFJLGtCQUFrQjs7OztBQTBGdEUsNkNBRUM7OztJQURDLHdDQUFjOzs7OztBQUdoQiwyREFJQzs7O0lBRkMsMkRBQW1COztJQUNuQiwwREFBa0I7O0FBNkVwQixNQUFNLE9BQU8scUJBQXFCO0NBb0JqQzs7O0lBbkJDLHNDQUF5Qjs7SUFFekIsMENBQTJDOztJQUMzQywyQ0FBK0M7O0lBRS9DLDZDQUE4Qzs7SUFDOUMsOENBQWtEOztJQUdsRCxtQ0FBMkQ7O0lBQzNELCtDQUF1RTs7SUFFdkUsdUNBR0U7O0lBRUYsd0NBQTJCOztJQUMzQix3Q0FBMkI7O0FBTzdCLE1BQU0sT0FBTyxrQkFBa0I7Ozs7SUFZN0IsWUFBeUMsVUFBa0I7UUFBbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQVYzQyxpQkFBWSxHQUFXLFNBQVMsQ0FBQztRQUdqRCxXQUFNLEdBQTZDLElBQUksWUFBWSxFQUcvRCxDQUFDO1FBMkRMLGFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDZixPQUFP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cG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBQTEFURk9STV9JRCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCAqIGFzIGFsZ29saWFzZWFyY2hQcm94eSBmcm9tICdhbGdvbGlhc2VhcmNoL2xpdGUnO1xuaW1wb3J0IGluc3RhbnRzZWFyY2ggZnJvbSAnaW5zdGFudHNlYXJjaC5qcy9lcyc7XG5pbXBvcnQgeyBBbGdvbGlhU2VhcmNoSGVscGVyIH0gZnJvbSAnYWxnb2xpYXNlYXJjaC1oZWxwZXInO1xuXG5pbXBvcnQgeyBXaWRnZXQgfSBmcm9tICcuLi9iYXNlLXdpZGdldCc7XG5pbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnLi4vdmVyc2lvbic7XG5cbmNvbnN0IGFsZ29saWFzZWFyY2ggPSBhbGdvbGlhc2VhcmNoUHJveHkuZGVmYXVsdCB8fCBhbGdvbGlhc2VhcmNoUHJveHk7XG5cbmV4cG9ydCB0eXBlIFNlYXJjaFJlcXVlc3QgPSB7XG4gIGluZGV4TmFtZTogc3RyaW5nO1xuICBwYXJhbXM6IFNlYXJjaFJlcXVlc3RQYXJhbWV0ZXJzO1xufTtcblxuZXhwb3J0IHR5cGUgU2VhcmNoRm9yRmFjZXRWYWx1ZXNSZXF1ZXN0ID0ge1xuICBpbmRleE5hbWU6IHN0cmluZztcbiAgcGFyYW1zOiBTZWFyY2hGb3JGYWNldFZhbHVlc1JlcXVlc3RQYXJhbWV0ZXJzO1xufTtcblxuLy8gRG9jdW1lbnRhdGlvbjogaHR0cHM6Ly93d3cuYWxnb2xpYS5jb20vZG9jL2FwaS1yZWZlcmVuY2Uvc2VhcmNoLWFwaS1wYXJhbWV0ZXJzL1xuZXhwb3J0IHR5cGUgU2VhcmNoUGFyYW1ldGVycyA9IHtcbiAgLy8gQXR0cmlidXRlc1xuICBhdHRyaWJ1dGVzVG9SZXRyaWV2ZT86IHN0cmluZ1tdO1xuICByZXN0cmljdFNlYXJjaGFibGVBdHRyaWJ1dGVzPzogc3RyaW5nW107XG5cbiAgLy8gRmlsdGVyaW5nXG4gIGZpbHRlcnM/OiBzdHJpbmc7XG4gIGZhY2V0RmlsdGVycz86IHN0cmluZ1tdO1xuICBvcHRpb25hbEZpbHRlcnM/OiBzdHJpbmdbXTtcbiAgbnVtZXJpY0ZpbHRlcnM/OiBzdHJpbmdbXTtcbiAgc3VtT3JGaWx0ZXJzU2NvcmVzPzogYm9vbGVhbjtcblxuICAvLyBGYWNldGluZ1xuICBmYWNldHM/OiBzdHJpbmdbXTtcbiAgbWF4VmFsdWVzUGVyRmFjZXQ/OiBudW1iZXI7XG4gIGZhY2V0aW5nQWZ0ZXJEaXN0aW5jdD86IGJvb2xlYW47XG4gIHNvcnRGYWNldFZhbHVlc0J5Pzogc3RyaW5nO1xuXG4gIC8vIEhpZ2hsaWdodGluZyAvIFNuaXBwZXRpbmdcbiAgYXR0cmlidXRlc1RvSGlnaGxpZ2h0Pzogc3RyaW5nW107XG4gIGF0dHJpYnV0ZXNUb1NuaXBwZXQ/OiBzdHJpbmdbXTtcbiAgaGlnaGxpZ2h0UHJlVGFnPzogc3RyaW5nO1xuICBoaWdobGlnaHRQb3N0VGFnPzogc3RyaW5nO1xuICBzbmlwcGV0RWxsaXBzaXNUZXh0Pzogc3RyaW5nO1xuICByZXN0cmljdEhpZ2hsaWdodEFuZFNuaXBwZXRBcnJheXM/OiBib29sZWFuO1xuXG4gIC8vIFBhZ2luYXRpb25cbiAgcGFnZT86IG51bWJlcjtcbiAgaGl0c1BlclBhZ2U/OiBudW1iZXI7XG4gIG9mZnNldD86IG51bWJlcjtcbiAgbGVuZ3RoPzogbnVtYmVyO1xuXG4gIC8vIFR5cG9zXG4gIG1pbldvcmRTaXplZm9yMVR5cG8/OiBudW1iZXI7XG4gIG1pbldvcmRTaXplZm9yMlR5cG9zPzogbnVtYmVyO1xuICB0eXBvVG9sZXJhbmNlPzogc3RyaW5nIHwgYm9vbGVhbjtcbiAgYWxsb3dUeXBvc09uTnVtZXJpY1Rva2Vucz86IGJvb2xlYW47XG4gIGlnbm9yZVBsdXJhbHM/OiBib29sZWFuIHwgc3RyaW5nW107XG4gIGRpc2FibGVUeXBvVG9sZXJhbmNlT25BdHRyaWJ1dGVzPzogc3RyaW5nW107XG5cbiAgLy8gR2VvLVNlYXJjaFxuICBhcm91bmRMYXRMbmc/OiBzdHJpbmc7XG4gIGFyb3VuZExhdExuZ1ZpYUlQPzogYm9vbGVhbjtcbiAgYXJvdW5kUmFkaXVzPzogbnVtYmVyIHwgJ2FsbCc7XG4gIGFyb3VuZFByZWNpc2lvbj86IG51bWJlcjtcbiAgbWluaW11bUFyb3VuZFJhZGl1cz86IG51bWJlcjtcbiAgaW5zaWRlQm91bmRpbmdCb3g/OiBHZW9SZWN0YW5nbGUgfCBHZW9SZWN0YW5nbGVbXTtcbiAgaW5zaWRlUG9seWdvbj86IEdlb1BvbHlnb24gfCBHZW9Qb2x5Z29uW107XG5cbiAgLy8gUXVlcnkgU3RyYXRlZ3lcbiAgcXVlcnlUeXBlPzogc3RyaW5nO1xuICByZW1vdmVXb3Jkc0lmTm9SZXN1bHRzPzogc3RyaW5nO1xuICBhZHZhbmNlZFN5bnRheD86IGJvb2xlYW47XG4gIG9wdGlvbmFsV29yZHM/OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgcmVtb3ZlU3RvcFdvcmRzPzogYm9vbGVhbiB8IHN0cmluZ1tdO1xuICBkaXNhYmxlRXhhY3RPbkF0dHJpYnV0ZXM/OiBzdHJpbmdbXTtcbiAgZXhhY3RPblNpbmdsZVdvcmRRdWVyeT86IHN0cmluZztcbiAgYWx0ZXJuYXRpdmVzQXNFeGFjdD86IHN0cmluZ1tdO1xuXG4gIC8vIFF1ZXJ5IFJ1bGVzXG4gIGVuYWJsZVJ1bGVzPzogYm9vbGVhbjtcbiAgcnVsZUNvbnRleHRzPzogc3RyaW5nW107XG5cbiAgLy8gQWR2YW5jZWRcbiAgbWluUHJveGltaXR5PzogbnVtYmVyO1xuICByZXNwb25zZUZpZWxkcz86IHN0cmluZ1tdO1xuICBtYXhGYWNldEhpdHM/OiBudW1iZXI7XG4gIHBlcmNlbnRpbGVDb21wdXRhdGlvbj86IGJvb2xlYW47XG4gIGRpc3RpbmN0PzogbnVtYmVyIHwgYm9vbGVhbjtcbiAgZ2V0UmFua2luZ0luZm8/OiBib29sZWFuO1xuICBjbGlja0FuYWx5dGljcz86IGJvb2xlYW47XG4gIGFuYWx5dGljcz86IGJvb2xlYW47XG4gIGFuYWx5dGljc1RhZ3M/OiBzdHJpbmdbXTtcbiAgc3lub255bXM/OiBib29sZWFuO1xuICByZXBsYWNlU3lub255bXNJbkhpZ2hsaWdodD86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlYXJjaFJlcXVlc3RQYXJhbWV0ZXJzIGV4dGVuZHMgU2VhcmNoUGFyYW1ldGVycyB7XG4gIHF1ZXJ5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VhcmNoRm9yRmFjZXRWYWx1ZXNSZXF1ZXN0UGFyYW1ldGVyc1xuICBleHRlbmRzIFNlYXJjaFBhcmFtZXRlcnMge1xuICBmYWNldFF1ZXJ5OiBzdHJpbmc7XG4gIGZhY2V0TmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBHZW9SZWN0YW5nbGUgPSBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbmV4cG9ydCB0eXBlIEdlb1BvbHlnb24gPSBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG5cbi8vIERvY3VtZW50YXRpb246IGh0dHBzOi8vd3d3LmFsZ29saWEuY29tL2RvYy9yZXN0LWFwaS9zZWFyY2gvP2xhbmd1YWdlPWphdmFzY3JpcHQjc2VhcmNoLW11bHRpcGxlLWluZGV4ZXNcbmV4cG9ydCB0eXBlIFNlYXJjaFJlc3BvbnNlID0ge1xuICBoaXRzOiBIaXRbXTtcbiAgcGFnZT86IG51bWJlcjtcbiAgbmJIaXRzPzogbnVtYmVyO1xuICBuYlBhZ2VzPzogbnVtYmVyO1xuICBoaXRzUGVyUGFnZT86IG51bWJlcjtcbiAgcHJvY2Vzc2luZ1RpbWVNUz86IG51bWJlcjtcbiAgcXVlcnk/OiBzdHJpbmc7XG4gIHBhcmFtcz86IHN0cmluZztcbiAgaW5kZXg/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBIaXQgPSB7XG4gIF9oaWdobGlnaHRSZXN1bHQ/OiBvYmplY3Q7XG59O1xuXG4vLyBEb2N1bWVudGF0aW9uOiBodHRwczovL3d3dy5hbGdvbGlhLmNvbS9kb2MvcmVzdC1hcGkvc2VhcmNoLz9sYW5ndWFnZT1qYXZhc2NyaXB0I3NlYXJjaC1mb3ItZmFjZXQtdmFsdWVzXG5leHBvcnQgdHlwZSBTZWFyY2hGb3JGYWNldFZhbHVlc1Jlc3BvbnNlID0ge1xuICB2YWx1ZTogc3RyaW5nO1xuICBoaWdobGlnaHRlZD86IHN0cmluZztcbiAgY291bnQ/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBTZWFyY2hDbGllbnQgPSB7XG4gIHNlYXJjaDogKHJlcXVlc3RzOiBTZWFyY2hSZXF1ZXN0W10pID0+IFByb21pc2U8eyByZXN1bHRzOiBTZWFyY2hSZXNwb25zZVtdIH0+O1xuICBzZWFyY2hGb3JGYWNldFZhbHVlcz86IChcbiAgICByZXF1ZXN0czogU2VhcmNoRm9yRmFjZXRWYWx1ZXNSZXF1ZXN0W11cbiAgKSA9PiBQcm9taXNlPHsgZmFjZXRIaXRzOiBTZWFyY2hGb3JGYWNldFZhbHVlc1Jlc3BvbnNlW10gfVtdPjtcbn07XG5cbmV4cG9ydCB0eXBlIEluc3RhbnRTZWFyY2hDb25maWcgPSB7XG4gIGFwcElkPzogc3RyaW5nO1xuICBhcGlLZXk/OiBzdHJpbmc7XG4gIGluZGV4TmFtZTogc3RyaW5nO1xuXG4gIG51bWJlckxvY2FsZT86IHN0cmluZztcbiAgc2VhcmNoRnVuY3Rpb24/OiAoaGVscGVyOiBBbGdvbGlhU2VhcmNoSGVscGVyKSA9PiB2b2lkO1xuICBjcmVhdGVBbGdvbGlhQ2xpZW50PzogKFxuICAgIGFsZ29saWFzZWFyY2g6IEZ1bmN0aW9uLFxuICAgIGFwcElkOiBzdHJpbmcsXG4gICAgYXBpS2V5OiBzdHJpbmdcbiAgKSA9PiBvYmplY3Q7XG4gIHNlYXJjaENsaWVudD86IFNlYXJjaENsaWVudDtcbiAgc2VhcmNoUGFyYW1ldGVycz86IFNlYXJjaFBhcmFtZXRlcnMgfCB2b2lkO1xuICB1cmxTeW5jPzpcbiAgICB8IGJvb2xlYW5cbiAgICB8IHtcbiAgICAgICAgbWFwcGluZz86IG9iamVjdDtcbiAgICAgICAgdGhyZXNob2xkPzogbnVtYmVyO1xuICAgICAgICB0cmFja2VkUGFyYW1ldGVycz86IHN0cmluZ1tdO1xuICAgICAgICB1c2VIYXNoPzogYm9vbGVhbjtcbiAgICAgICAgZ2V0SGlzdG9yeVN0YXRlPzogKCkgPT4gb2JqZWN0O1xuICAgICAgfTtcbiAgcm91dGluZz86XG4gICAgfCBib29sZWFuXG4gICAgfCB7XG4gICAgICAgIHJvdXRlcj86IHtcbiAgICAgICAgICBvblVwZGF0ZTogKGNiOiAob2JqZWN0KSA9PiB2b2lkKSA9PiB2b2lkO1xuICAgICAgICAgIHJlYWQ6ICgpID0+IG9iamVjdDtcbiAgICAgICAgICB3cml0ZTogKHJvdXRlU3RhdGU6IG9iamVjdCkgPT4gdm9pZDtcbiAgICAgICAgICBjcmVhdGVVUkw6IChyb3V0ZVN0YXRlOiBvYmplY3QpID0+IHN0cmluZztcbiAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB2b2lkO1xuICAgICAgICB9O1xuICAgICAgICBzdGF0ZU1hcHBpbmc/OiB7XG4gICAgICAgICAgc3RhdGVUb1JvdXRlKG9iamVjdCk6IG9iamVjdDtcbiAgICAgICAgICByb3V0ZVRvU3RhdGUob2JqZWN0KTogb2JqZWN0O1xuICAgICAgICB9O1xuICAgICAgfTtcbn07XG5cbmV4cG9ydCBjbGFzcyBJbnN0YW50U2VhcmNoSW5zdGFuY2Uge1xuICBwdWJsaWMgc3RhcnQ6ICgpID0+IHZvaWQ7XG5cbiAgcHVibGljIGFkZFdpZGdldDogKHdpZGdldDogV2lkZ2V0KSA9PiB2b2lkO1xuICBwdWJsaWMgYWRkV2lkZ2V0czogKHdpZGdldHM6IFdpZGdldFtdKSA9PiB2b2lkO1xuXG4gIHB1YmxpYyByZW1vdmVXaWRnZXQ6ICh3aWRnZXQ6IFdpZGdldCkgPT4gdm9pZDtcbiAgcHVibGljIHJlbW92ZVdpZGdldHM6ICh3aWRnZXRzOiBXaWRnZXRbXSkgPT4gdm9pZDtcblxuICAvLyBFdmVudEVtbWl0ZXJcbiAgcHVibGljIG9uOiAoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikgPT4gdm9pZDtcbiAgcHVibGljIHJlbW92ZUxpc3RlbmVyOiAoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikgPT4gdm9pZDtcblxuICBwdWJsaWMgaGVscGVyOiB7XG4gICAgbGFzdFJlc3VsdHM6IE9iamVjdDtcbiAgICBzdGF0ZTogT2JqZWN0O1xuICB9O1xuXG4gIHB1YmxpYyByZWZyZXNoOiAoKSA9PiB2b2lkO1xuICBwdWJsaWMgZGlzcG9zZTogKCkgPT4gdm9pZDtcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWlzLWluc3RhbnRzZWFyY2gnLFxuICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc0luc3RhbnRTZWFyY2ggaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIHB1YmxpYyBjb25maWc6IEluc3RhbnRTZWFyY2hDb25maWc7XG4gIEBJbnB1dCgpIHB1YmxpYyBpbnN0YW5jZU5hbWU6IHN0cmluZyA9ICdkZWZhdWx0JztcblxuICBAT3V0cHV0KClcbiAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8eyByZXN1bHRzOiB7fTsgc3RhdGU6IHt9IH0+ID0gbmV3IEV2ZW50RW1pdHRlcjx7XG4gICAgcmVzdWx0czoge307XG4gICAgc3RhdGU6IHt9O1xuICB9PigpO1xuXG4gIHB1YmxpYyBpbnN0YW50U2VhcmNoSW5zdGFuY2U6IEluc3RhbnRTZWFyY2hJbnN0YW5jZTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IE9iamVjdCkge31cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVJbnN0YW50U2VhcmNoSW5zdGFuY2UodGhpcy5jb25maWcpO1xuICB9XG5cbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmluc3RhbnRTZWFyY2hJbnN0YW5jZS5zdGFydCgpO1xuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlLnJlbW92ZUxpc3RlbmVyKCdyZW5kZXInLCB0aGlzLm9uUmVuZGVyKTtcbiAgICB0aGlzLmluc3RhbnRTZWFyY2hJbnN0YW5jZS5kaXNwb3NlKCk7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlSW5zdGFudFNlYXJjaEluc3RhbmNlKGNvbmZpZzogSW5zdGFudFNlYXJjaENvbmZpZykge1xuICAgIC8vIGFkZCBkZWZhdWx0IHNlYXJjaFBhcmFtZXRlcnMgd2l0aCBoaWdobGlnaHRpbmcgY29uZmlnXG4gICAgaWYgKCFjb25maWcuc2VhcmNoUGFyYW1ldGVycykgY29uZmlnLnNlYXJjaFBhcmFtZXRlcnMgPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKGNvbmZpZy5zZWFyY2hQYXJhbWV0ZXJzLCB7XG4gICAgICBoaWdobGlnaHRQcmVUYWc6ICdfX2Fpcy1oaWdobGlnaHRfXycsXG4gICAgICBoaWdobGlnaHRQb3N0VGFnOiAnX18vYWlzLWhpZ2hsaWdodF9fJyxcbiAgICB9KTtcblxuICAgIC8vIHJlbW92ZSBVUkxTeW5jIHdpZGdldCBpZiBvbiBTU1JcbiAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLnVybFN5bmMgIT09ICd1bmRlZmluZWQnKSBkZWxldGUgY29uZmlnLnVybFN5bmM7XG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy5yb3V0aW5nICE9PSAndW5kZWZpbmVkJykgZGVsZXRlIGNvbmZpZy5yb3V0aW5nO1xuICAgIH1cblxuICAgIC8vIGN1c3RvbSBhbGdvbGlhIGNsaWVudCBhZ2VudFxuICAgIGlmICghY29uZmlnLnNlYXJjaENsaWVudCAmJiAhY29uZmlnLmNyZWF0ZUFsZ29saWFDbGllbnQpIHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGFsZ29saWFzZWFyY2goY29uZmlnLmFwcElkLCBjb25maWcuYXBpS2V5KTtcbiAgICAgIGNsaWVudC5hZGRBbGdvbGlhQWdlbnQoYGFuZ3VsYXItaW5zdGFudHNlYXJjaCAke1ZFUlNJT059YCk7XG5cbiAgICAgIGNvbmZpZy5zZWFyY2hDbGllbnQgPSBjbGllbnQ7XG4gICAgICBjb25maWcuYXBwSWQgPSB1bmRlZmluZWQ7XG4gICAgICBjb25maWcuYXBpS2V5ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlID0gaW5zdGFudHNlYXJjaChjb25maWcpO1xuICAgIHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlLm9uKCdyZW5kZXInLCB0aGlzLm9uUmVuZGVyKTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRXaWRnZXQod2lkZ2V0OiBXaWRnZXQpIHtcbiAgICB0aGlzLmluc3RhbnRTZWFyY2hJbnN0YW5jZS5hZGRXaWRnZXQod2lkZ2V0KTtcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVXaWRnZXQod2lkZ2V0OiBXaWRnZXQpIHtcbiAgICB0aGlzLmluc3RhbnRTZWFyY2hJbnN0YW5jZS5yZW1vdmVXaWRnZXQod2lkZ2V0KTtcbiAgfVxuXG4gIHB1YmxpYyByZWZyZXNoKCkge1xuICAgIHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlLnJlZnJlc2goKTtcbiAgfVxuXG4gIG9uUmVuZGVyID0gKCkgPT4ge1xuICAgIHRoaXMuY2hhbmdlLmVtaXQoe1xuICAgICAgcmVzdWx0czogdGhpcy5pbnN0YW50U2VhcmNoSW5zdGFuY2UuaGVscGVyLmxhc3RSZXN1bHRzLFxuICAgICAgc3RhdGU6IHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlLmhlbHBlci5zdGF0ZSxcbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==