/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const get = require('lodash/get');
import { Component, Input } from '@angular/core';
import { bem } from '../utils';
export class NgAisHighlight {
    constructor() {
        this.tagName = 'em';
        this.cx = bem('Highlight');
    }
    /**
     * @return {?}
     */
    get content() {
        if (this.attribute === 'highlighted') {
            return this.hit.highlighted
                ? this.replaceWithTagName(this.hit.highlighted)
                : this.hit.label;
        }
        if (this.hit.hasOwnProperty('_highlightResult')) {
            /** @type {?} */
            const attributeHighlighted = get(this.hit._highlightResult, this.attribute);
            // check that the attributeHighlighted is a string
            if (attributeHighlighted !== undefined &&
                typeof attributeHighlighted.value === 'string') {
                return this.replaceWithTagName(attributeHighlighted.value);
            }
        }
        /** @type {?} */
        const fallback = get(this.hit, this.attribute);
        if (!fallback) {
            console.warn(`Could not find attribute [${this.attribute}] into hit object, will display an empty string.`);
            return '';
        }
        return fallback;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    replaceWithTagName(value) {
        return value
            .replace(new RegExp('<em>', 'g'), `<${this.tagName} class="${this.cx('highlighted')}">`)
            .replace(new RegExp('</em>', 'g'), `</${this.tagName}>`);
    }
}
NgAisHighlight.decorators = [
    { type: Component, args: [{
                selector: 'ais-highlight',
                template: `<span [class]="cx()" [innerHtml]="content"></span>`,
            },] },
];
NgAisHighlight.propDecorators = {
    attribute: [{ type: Input }],
    hit: [{ type: Input }],
    tagName: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgAisHighlight.prototype.attribute;
    /** @type {?} */
    NgAisHighlight.prototype.hit;
    /** @type {?} */
    NgAisHighlight.prototype.tagName;
    /** @type {?} */
    NgAisHighlight.prototype.cx;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoLyIsInNvdXJjZXMiOlsiaGlnaGxpZ2h0L2hpZ2hsaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFNL0IsTUFBTSxPQUFPLGNBQWM7SUFKM0I7UUFPVyxZQUFPLEdBQVcsSUFBSSxDQUFDO1FBRWhDLE9BQUUsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUE4Q3hCLENBQUM7Ozs7SUE1Q0MsSUFBSSxPQUFPO1FBQ1QsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLGFBQWEsRUFBRTtZQUNwQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVztnQkFDekIsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztnQkFDL0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1NBQ3BCO1FBRUQsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFOztrQkFDekMsb0JBQW9CLEdBQUcsR0FBRyxDQUM5QixJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUN6QixJQUFJLENBQUMsU0FBUyxDQUNmO1lBRUQsa0RBQWtEO1lBQ2xELElBQ0Usb0JBQW9CLEtBQUssU0FBUztnQkFDbEMsT0FBTyxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUM5QztnQkFDQSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM1RDtTQUNGOztjQUVLLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzlDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixPQUFPLENBQUMsSUFBSSxDQUNWLDZCQUNFLElBQUksQ0FBQyxTQUNQLGtEQUFrRCxDQUNuRCxDQUFDO1lBRUYsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsS0FBYTtRQUM5QixPQUFPLEtBQUs7YUFDVCxPQUFPLENBQ04sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUN2QixJQUFJLElBQUksQ0FBQyxPQUFPLFdBQVcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUN0RDthQUNBLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7WUF0REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixRQUFRLEVBQUUsb0RBQW9EO2FBQy9EOzs7d0JBRUUsS0FBSztrQkFDTCxLQUFLO3NCQUNMLEtBQUs7Ozs7SUFGTixtQ0FBMkI7O0lBQzNCLDZCQUE4RTs7SUFDOUUsaUNBQWdDOztJQUVoQyw0QkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnZXQgPSByZXF1aXJlKCdsb2Rhc2gvZ2V0Jyk7XG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBiZW0gfSBmcm9tICcuLi91dGlscyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Fpcy1oaWdobGlnaHQnLFxuICB0ZW1wbGF0ZTogYDxzcGFuIFtjbGFzc109XCJjeCgpXCIgW2lubmVySHRtbF09XCJjb250ZW50XCI+PC9zcGFuPmAsXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzSGlnaGxpZ2h0IHtcbiAgQElucHV0KCkgYXR0cmlidXRlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGhpdDogeyBfaGlnaGxpZ2h0UmVzdWx0Pzoge307IGxhYmVsPzogc3RyaW5nOyBoaWdobGlnaHRlZD86IHN0cmluZyB9O1xuICBASW5wdXQoKSB0YWdOYW1lOiBzdHJpbmcgPSAnZW0nO1xuXG4gIGN4ID0gYmVtKCdIaWdobGlnaHQnKTtcblxuICBnZXQgY29udGVudCgpIHtcbiAgICBpZiAodGhpcy5hdHRyaWJ1dGUgPT09ICdoaWdobGlnaHRlZCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmhpdC5oaWdobGlnaHRlZFxuICAgICAgICA/IHRoaXMucmVwbGFjZVdpdGhUYWdOYW1lKHRoaXMuaGl0LmhpZ2hsaWdodGVkKVxuICAgICAgICA6IHRoaXMuaGl0LmxhYmVsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhpdC5oYXNPd25Qcm9wZXJ0eSgnX2hpZ2hsaWdodFJlc3VsdCcpKSB7XG4gICAgICBjb25zdCBhdHRyaWJ1dGVIaWdobGlnaHRlZCA9IGdldChcbiAgICAgICAgdGhpcy5oaXQuX2hpZ2hsaWdodFJlc3VsdCxcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVcbiAgICAgICk7XG5cbiAgICAgIC8vIGNoZWNrIHRoYXQgdGhlIGF0dHJpYnV0ZUhpZ2hsaWdodGVkIGlzIGEgc3RyaW5nXG4gICAgICBpZiAoXG4gICAgICAgIGF0dHJpYnV0ZUhpZ2hsaWdodGVkICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgdHlwZW9mIGF0dHJpYnV0ZUhpZ2hsaWdodGVkLnZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2VXaXRoVGFnTmFtZShhdHRyaWJ1dGVIaWdobGlnaHRlZC52YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZmFsbGJhY2sgPSBnZXQodGhpcy5oaXQsIHRoaXMuYXR0cmlidXRlKTtcbiAgICBpZiAoIWZhbGxiYWNrKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBDb3VsZCBub3QgZmluZCBhdHRyaWJ1dGUgWyR7XG4gICAgICAgICAgdGhpcy5hdHRyaWJ1dGVcbiAgICAgICAgfV0gaW50byBoaXQgb2JqZWN0LCB3aWxsIGRpc3BsYXkgYW4gZW1wdHkgc3RyaW5nLmBcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cblxuICByZXBsYWNlV2l0aFRhZ05hbWUodmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiB2YWx1ZVxuICAgICAgLnJlcGxhY2UoXG4gICAgICAgIG5ldyBSZWdFeHAoJzxlbT4nLCAnZycpLFxuICAgICAgICBgPCR7dGhpcy50YWdOYW1lfSBjbGFzcz1cIiR7dGhpcy5jeCgnaGlnaGxpZ2h0ZWQnKX1cIj5gXG4gICAgICApXG4gICAgICAucmVwbGFjZShuZXcgUmVnRXhwKCc8L2VtPicsICdnJyksIGA8LyR7dGhpcy50YWdOYW1lfT5gKTtcbiAgfVxufVxuIl19