/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { bem, noop } from './utils';
var Widget = /** @class */ (function () {
    function Widget() {
    }
    return Widget;
}());
export { Widget };
if (false) {
    /** @type {?} */
    Widget.prototype.init;
    /** @type {?} */
    Widget.prototype.getConfiguration;
    /** @type {?} */
    Widget.prototype.render;
    /** @type {?} */
    Widget.prototype.dispose;
}
var BaseWidget = /** @class */ (function () {
    function BaseWidget(widgetName) {
        var _this = this;
        this.state = {};
        this.updateState = function (state, isFirstRendering) {
            if (isFirstRendering) {
                return Promise.resolve().then(function () {
                    _this.state = state;
                });
            }
            _this.state = state;
        };
        this.cx = bem(widgetName);
    }
    /**
     * @param {?} connector
     * @param {?=} options
     * @return {?}
     */
    BaseWidget.prototype.createWidget = /**
     * @param {?} connector
     * @param {?=} options
     * @return {?}
     */
    function (connector, options) {
        if (options === void 0) { options = {}; }
        this.widget = connector(this.updateState, noop)(options);
    };
    /**
     * @return {?}
     */
    BaseWidget.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // add widget to the InstantSearch Instance
        this.instantSearchParent.addWidget(this.widget);
    };
    /**
     * @return {?}
     */
    BaseWidget.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.instantSearchParent.platformId)) {
            this.instantSearchParent.removeWidget(this.widget);
        }
    };
    // helper method for genering item list className
    // helper method for genering item list className
    /**
     * @param {?} item
     * @return {?}
     */
    BaseWidget.prototype.getItemClass = 
    // helper method for genering item list className
    /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var className = this.cx('item');
        if (item.isRefined) {
            className = className + " " + this.cx('item', 'selected');
        }
        return className;
    };
    BaseWidget.propDecorators = {
        autoHideContainer: [{ type: Input }]
    };
    return BaseWidget;
}());
export { BaseWidget };
if (false) {
    /** @type {?} */
    BaseWidget.prototype.instantSearchParent;
    /** @type {?} */
    BaseWidget.prototype.autoHideContainer;
    /** @type {?} */
    BaseWidget.prototype.widget;
    /** @type {?} */
    BaseWidget.prototype.state;
    /** @type {?} */
    BaseWidget.prototype.cx;
    /** @type {?} */
    BaseWidget.prototype.updateState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS13aWRnZXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvIiwic291cmNlcyI6WyJiYXNlLXdpZGdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFcEM7SUFBQTtJQTBCQSxDQUFDO0lBQUQsYUFBQztBQUFELENBQUMsQUExQkQsSUEwQkM7Ozs7SUF6QkMsc0JBUVU7O0lBQ1Ysa0NBQXVDOztJQUN2Qyx3QkFRVTs7SUFDVix5QkFLbUI7O0FBUXJCO0lBU0Usb0JBQVksVUFBa0I7UUFBOUIsaUJBRUM7UUFMTSxVQUFLLEdBQVksRUFBRSxDQUFDO1FBc0JwQixnQkFBVyxHQUFHLFVBQ25CLEtBQVMsRUFDVCxnQkFBeUI7WUFFekIsSUFBSSxnQkFBZ0IsRUFBRTtnQkFDcEIsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO29CQUM1QixLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDckIsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUVELEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLENBQUMsQ0FBQztRQTdCQSxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1QixDQUFDOzs7Ozs7SUFFTSxpQ0FBWTs7Ozs7SUFBbkIsVUFBb0IsU0FBb0IsRUFBRSxPQUFvQjtRQUFwQix3QkFBQSxFQUFBLFlBQW9CO1FBQzVELElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7OztJQUVNLDZCQUFROzs7SUFBZjtRQUNFLDJDQUEyQztRQUMzQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRCxDQUFDOzs7O0lBRU0sZ0NBQVc7OztJQUFsQjtRQUNFLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzFELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQztJQWVELGlEQUFpRDs7Ozs7O0lBQzFDLGlDQUFZOzs7Ozs7SUFBbkIsVUFBb0IsSUFBNkI7O1lBQzNDLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUUvQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsU0FBUyxHQUFNLFNBQVMsU0FBSSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUcsQ0FBQztTQUMzRDtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7O29DQS9DQSxLQUFLOztJQWdEUixpQkFBQztDQUFBLEFBbkRELElBbURDO1NBbkRZLFVBQVU7OztJQUNyQix5Q0FBZ0M7O0lBRWhDLHVDQUE0Qzs7SUFFNUMsNEJBQXVCOztJQUN2QiwyQkFBMkI7O0lBQzNCLHdCQUFvQjs7SUFxQnBCLGlDQVdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBiZW0sIG5vb3AgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNsYXNzIFdpZGdldCB7XG4gIHB1YmxpYyBpbml0OiAoXG4gICAgcGFyYW1zOiB7XG4gICAgICB0ZW1wbGF0ZXNDb25maWc6IG9iamVjdDtcbiAgICAgIHN0YXRlOiBvYmplY3Q7XG4gICAgICByZXN1bHRzOiBvYmplY3RbXTtcbiAgICAgIGNyZWF0ZVVSTDogKHZhbHVlOiBhbnkpID0+IHN0cmluZztcbiAgICAgIGluc3RhbnRTZWFyY2hJbnN0YW5jZTogb2JqZWN0O1xuICAgIH1cbiAgKSA9PiB2b2lkO1xuICBwdWJsaWMgZ2V0Q29uZmlndXJhdGlvbj86ICgpID0+IG9iamVjdDtcbiAgcHVibGljIHJlbmRlcjogKFxuICAgIHBhcmFtczoge1xuICAgICAgdGVtcGxhdGVzQ29uZmlnOiBvYmplY3Q7XG4gICAgICBzdGF0ZTogb2JqZWN0O1xuICAgICAgcmVzdWx0czoge31bXTtcbiAgICAgIGNyZWF0ZVVSTDogKHZhbHVlOiBhbnkpID0+IHN0cmluZztcbiAgICAgIGluc3RhbnRTZWFyY2hJbnN0YW5jZTogb2JqZWN0O1xuICAgIH1cbiAgKSA9PiB2b2lkO1xuICBwdWJsaWMgZGlzcG9zZTogKFxuICAgIHBhcmFtczoge1xuICAgICAgaGVscGVyOiBvYmplY3Q7XG4gICAgICBzdGF0ZTogb2JqZWN0O1xuICAgIH1cbiAgKSA9PiBvYmplY3QgfCB2b2lkO1xufVxuXG5leHBvcnQgdHlwZSBDb25uZWN0b3IgPSAoXG4gIHJlbmRlckZuOiAoc3RhdGU6IG9iamVjdCwgaXNGaXJzdFJlbmRlcmluZzogYm9vbGVhbikgPT4gdm9pZCxcbiAgdW5tb3VudEZuOiAoKSA9PiB2b2lkXG4pID0+ICh3aWRnZXRPcHRpb25zPzogb2JqZWN0KSA9PiBXaWRnZXQ7XG5cbmV4cG9ydCBjbGFzcyBCYXNlV2lkZ2V0IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55O1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBhdXRvSGlkZUNvbnRhaW5lcj86IGJvb2xlYW47XG5cbiAgcHVibGljIHdpZGdldD86IFdpZGdldDtcbiAgcHVibGljIHN0YXRlPzogb2JqZWN0ID0ge307XG4gIHB1YmxpYyBjeDogRnVuY3Rpb247XG5cbiAgY29uc3RydWN0b3Iod2lkZ2V0TmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5jeCA9IGJlbSh3aWRnZXROYW1lKTtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVXaWRnZXQoY29ubmVjdG9yOiBDb25uZWN0b3IsIG9wdGlvbnM6IG9iamVjdCA9IHt9KSB7XG4gICAgdGhpcy53aWRnZXQgPSBjb25uZWN0b3IodGhpcy51cGRhdGVTdGF0ZSwgbm9vcCkob3B0aW9ucyk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgLy8gYWRkIHdpZGdldCB0byB0aGUgSW5zdGFudFNlYXJjaCBJbnN0YW5jZVxuICAgIHRoaXMuaW5zdGFudFNlYXJjaFBhcmVudC5hZGRXaWRnZXQodGhpcy53aWRnZXQpO1xuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLmluc3RhbnRTZWFyY2hQYXJlbnQucGxhdGZvcm1JZCkpIHtcbiAgICAgIHRoaXMuaW5zdGFudFNlYXJjaFBhcmVudC5yZW1vdmVXaWRnZXQodGhpcy53aWRnZXQpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVTdGF0ZSA9IChcbiAgICBzdGF0ZToge30sXG4gICAgaXNGaXJzdFJlbmRlcmluZzogYm9vbGVhblxuICApOiBQcm9taXNlPHZvaWQ+IHwgdm9pZCA9PiB7XG4gICAgaWYgKGlzRmlyc3RSZW5kZXJpbmcpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICB9O1xuXG4gIC8vIGhlbHBlciBtZXRob2QgZm9yIGdlbmVyaW5nIGl0ZW0gbGlzdCBjbGFzc05hbWVcbiAgcHVibGljIGdldEl0ZW1DbGFzcyhpdGVtOiB7IGlzUmVmaW5lZD86IGJvb2xlYW4gfSkge1xuICAgIGxldCBjbGFzc05hbWUgPSB0aGlzLmN4KCdpdGVtJyk7XG5cbiAgICBpZiAoaXRlbS5pc1JlZmluZWQpIHtcbiAgICAgIGNsYXNzTmFtZSA9IGAke2NsYXNzTmFtZX0gJHt0aGlzLmN4KCdpdGVtJywgJ3NlbGVjdGVkJyl9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG59XG4iXX0=