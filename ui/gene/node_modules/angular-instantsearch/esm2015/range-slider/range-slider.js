/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, Inject, forwardRef } from '@angular/core';
import { connectRange } from 'instantsearch.js/es/connectors';
import * as noUiSlider from 'nouislider';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { parseNumberInput, noop } from '../utils';
export class NgAisRangeSlider extends BaseWidget {
    /**
     * @param {?} instantSearchParent
     */
    constructor(instantSearchParent) {
        super('RangeSlider');
        this.instantSearchParent = instantSearchParent;
        // render options
        this.pips = true;
        this.tooltips = true;
        this.precision = 2;
        this.state = {
            range: { min: 0, max: 1 },
            refine: noop,
            start: [0, 1],
        };
        this.updateState = (state, isFirstRendering) => {
            if (isFirstRendering) {
                // create slider
                /** @type {?} */
                const config = {
                    animate: false,
                    behaviour: 'snap',
                    connect: true,
                    range: { min: 0, max: 1 },
                    start: [0, 1],
                    step: this.step,
                    tooltips: this.tooltips && [
                        { to: this.formatTooltip },
                        { to: this.formatTooltip },
                    ],
                };
                if (this.pips === true || typeof this.pips === 'undefined') {
                    Object.assign(config, {
                        pips: {
                            density: 3,
                            mode: 'positions',
                            stepped: true,
                            values: [0, 50, 100],
                        },
                    });
                }
                else if (this.pips !== undefined) {
                    Object.assign(config, { pips: this.pips });
                }
                this.slider = noUiSlider.create(this.sliderContainer.nativeElement, config);
                // register listen events
                this.sliderContainer.nativeElement.noUiSlider.on('change', this.handleChange);
            }
            // update component inner state
            this.state = state;
            // update the slider state
            const { range: { min, max }, start, } = state;
            /** @type {?} */
            const disabled = min === max;
            /** @type {?} */
            const range = disabled ? { min, max: max + 0.0001 } : { min, max };
            this.slider.updateOptions({ disabled, range, start });
        };
        this.handleChange = (values) => {
            this.state.refine(values);
        };
        this.formatTooltip = (value) => {
            return value.toFixed(parseNumberInput(this.precision));
        };
    }
    /**
     * @return {?}
     */
    get step() {
        // compute step from the precision value
        /** @type {?} */
        const precision = parseNumberInput(this.precision) || 2;
        return 1 / Math.pow(10, precision);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createWidget(connectRange, {
            attributeName: this.attribute,
            max: parseNumberInput(this.max),
            min: parseNumberInput(this.min),
            precision: parseNumberInput(this.precision),
        });
        super.ngOnInit();
    }
}
NgAisRangeSlider.decorators = [
    { type: Component, args: [{
                selector: 'ais-range-slider',
                template: `
    <div [class]="cx()">
      <div [class]="cx('body')">
        <div #sliderContainer></div>
      </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
NgAisRangeSlider.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => NgAisInstantSearch),] }] }
];
NgAisRangeSlider.propDecorators = {
    sliderContainer: [{ type: ViewChild, args: ['sliderContainer',] }],
    pips: [{ type: Input }],
    tooltips: [{ type: Input }],
    attribute: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    precision: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgAisRangeSlider.prototype.sliderContainer;
    /** @type {?} */
    NgAisRangeSlider.prototype.pips;
    /** @type {?} */
    NgAisRangeSlider.prototype.tooltips;
    /** @type {?} */
    NgAisRangeSlider.prototype.attribute;
    /** @type {?} */
    NgAisRangeSlider.prototype.min;
    /** @type {?} */
    NgAisRangeSlider.prototype.max;
    /** @type {?} */
    NgAisRangeSlider.prototype.precision;
    /** @type {?} */
    NgAisRangeSlider.prototype.state;
    /**
     * @type {?}
     * @private
     */
    NgAisRangeSlider.prototype.slider;
    /** @type {?} */
    NgAisRangeSlider.prototype.updateState;
    /** @type {?} */
    NgAisRangeSlider.prototype.handleChange;
    /** @type {?} */
    NgAisRangeSlider.prototype.formatTooltip;
    /** @type {?} */
    NgAisRangeSlider.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2Utc2xpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoLyIsInNvdXJjZXMiOlsicmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFaEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sS0FBSyxVQUFVLE1BQU0sWUFBWSxDQUFDO0FBRXpDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBa0JsRCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsVUFBVTs7OztJQTJCOUMsWUFFUyxtQkFBd0I7UUFFL0IsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRmQsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFLOztRQXpCakIsU0FBSSxHQUFZLElBQUksQ0FBQztRQUNyQixhQUFRLEdBQVksSUFBSSxDQUFDO1FBTXpCLGNBQVMsR0FBb0IsQ0FBQyxDQUFDO1FBRXhDLFVBQUssR0FBcUI7WUFDL0IsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1lBQ3pCLE1BQU0sRUFBRSxJQUFJO1lBQ1osS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNkLENBQUM7UUE0QkssZ0JBQVcsR0FBRyxDQUFDLEtBQUssRUFBRSxnQkFBeUIsRUFBRSxFQUFFO1lBQ3hELElBQUksZ0JBQWdCLEVBQUU7OztzQkFFZCxNQUFNLEdBQUc7b0JBQ2IsT0FBTyxF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QyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQy9CLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQy9CLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1NBQzVDLENBQUMsQ0FBQztRQUVILEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNuQixDQUFDOzs7WUFyREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLFFBQVEsRUFBRTs7Ozs7O0dBTVQ7YUFDRjs7Ozs0Q0E2QkksTUFBTSxTQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzs7OzhCQTNCN0MsU0FBUyxTQUFDLGlCQUFpQjttQkFHM0IsS0FBSzt1QkFDTCxLQUFLO3dCQUdMLEtBQUs7a0JBQ0wsS0FBSztrQkFDTCxLQUFLO3dCQUNMLEtBQUs7Ozs7SUFWTiwyQ0FBMEQ7O0lBRzFELGdDQUFxQzs7SUFDckMsb0NBQXlDOztJQUd6QyxxQ0FBa0M7O0lBQ2xDLCtCQUFzQzs7SUFDdEMsK0JBQXNDOztJQUN0QyxxQ0FBK0M7O0lBRS9DLGlDQUlFOzs7OztJQUVGLGtDQUFvQjs7SUEwQnBCLHVDQXNERTs7SUFFRix3Q0FFRTs7SUFFRix5Q0FFRTs7SUEvRUEsK0NBQytCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkLCBJbmplY3QsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29ubmVjdFJhbmdlIH0gZnJvbSAnaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzJztcbmltcG9ydCAqIGFzIG5vVWlTbGlkZXIgZnJvbSAnbm91aXNsaWRlcic7XG5cbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tICcuLi9iYXNlLXdpZGdldCc7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tICcuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2gnO1xuaW1wb3J0IHsgcGFyc2VOdW1iZXJJbnB1dCwgbm9vcCB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IHR5cGUgUmFuZ2VTbGlkZXJTdGF0ZSA9IHtcbiAgcmFuZ2U6IHsgbWluOiBudW1iZXI7IG1heDogbnVtYmVyIH07XG4gIHJlZmluZTogRnVuY3Rpb247XG4gIHN0YXJ0OiBudW1iZXJbXTtcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Fpcy1yYW5nZS1zbGlkZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW2NsYXNzXT1cImN4KClcIj5cbiAgICAgIDxkaXYgW2NsYXNzXT1cImN4KCdib2R5JylcIj5cbiAgICAgICAgPGRpdiAjc2xpZGVyQ29udGFpbmVyPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzUmFuZ2VTbGlkZXIgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgQFZpZXdDaGlsZCgnc2xpZGVyQ29udGFpbmVyJykgcHVibGljIHNsaWRlckNvbnRhaW5lcjogYW55O1xuXG4gIC8vIHJlbmRlciBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBwaXBzOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgcHVibGljIHRvb2x0aXBzOiBib29sZWFuID0gdHJ1ZTtcblxuICAvLyBjb25uZWN0b3Igb3B0aW9uc1xuICBASW5wdXQoKSBwdWJsaWMgYXR0cmlidXRlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBtaW4/OiBudW1iZXIgfCBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBtYXg/OiBudW1iZXIgfCBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBwcmVjaXNpb246IG51bWJlciB8IHN0cmluZyA9IDI7XG5cbiAgcHVibGljIHN0YXRlOiBSYW5nZVNsaWRlclN0YXRlID0ge1xuICAgIHJhbmdlOiB7IG1pbjogMCwgbWF4OiAxIH0sXG4gICAgcmVmaW5lOiBub29wLFxuICAgIHN0YXJ0OiBbMCwgMV0sXG4gIH07XG5cbiAgcHJpdmF0ZSBzbGlkZXI6IGFueTtcblxuICBnZXQgc3RlcCgpIHtcbiAgICAvLyBjb21wdXRlIHN0ZXAgZnJvbSB0aGUgcHJlY2lzaW9uIHZhbHVlXG4gICAgY29uc3QgcHJlY2lzaW9uID0gcGFyc2VOdW1iZXJJbnB1dCh0aGlzLnByZWNpc2lvbikgfHwgMjtcbiAgICByZXR1cm4gMSAvIE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcignUmFuZ2VTbGlkZXInKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0UmFuZ2UsIHtcbiAgICAgIGF0dHJpYnV0ZU5hbWU6IHRoaXMuYXR0cmlidXRlLFxuICAgICAgbWF4OiBwYXJzZU51bWJlcklucHV0KHRoaXMubWF4KSxcbiAgICAgIG1pbjogcGFyc2VOdW1iZXJJbnB1dCh0aGlzLm1pbiksXG4gICAgICBwcmVjaXNpb246IHBhcnNlTnVtYmVySW5wdXQodGhpcy5wcmVjaXNpb24pLFxuICAgIH0pO1xuXG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVTdGF0ZSA9IChzdGF0ZSwgaXNGaXJzdFJlbmRlcmluZzogYm9vbGVhbikgPT4ge1xuICAgIGlmIChpc0ZpcnN0UmVuZGVyaW5nKSB7XG4gICAgICAvLyBjcmVhdGUgc2xpZGVyXG4gICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgIGFuaW1hdGU6IGZhbHNlLFxuICAgICAgICBiZWhhdmlvdXI6ICdzbmFwJyxcbiAgICAgICAgY29ubmVjdDogdHJ1ZSxcbiAgICAgICAgcmFuZ2U6IHsgbWluOiAwLCBtYXg6IDEgfSxcbiAgICAgICAgc3RhcnQ6IFswLCAxXSxcbiAgICAgICAgc3RlcDogdGhpcy5zdGVwLFxuICAgICAgICB0b29sdGlwczogdGhpcy50b29sdGlwcyAmJiBbXG4gICAgICAgICAgeyB0bzogdGhpcy5mb3JtYXRUb29sdGlwIH0sXG4gICAgICAgICAgeyB0bzogdGhpcy5mb3JtYXRUb29sdGlwIH0sXG4gICAgICAgIF0sXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5waXBzID09PSB0cnVlIHx8IHR5cGVvZiB0aGlzLnBpcHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oY29uZmlnLCB7XG4gICAgICAgICAgcGlwczoge1xuICAgICAgICAgICAgZGVuc2l0eTogMyxcbiAgICAgICAgICAgIG1vZGU6ICdwb3NpdGlvbnMnLFxuICAgICAgICAgICAgc3RlcHBlZDogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlczogWzAsIDUwLCAxMDBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnBpcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBPYmplY3QuYXNzaWduKGNvbmZpZywgeyBwaXBzOiB0aGlzLnBpcHMgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2xpZGVyID0gbm9VaVNsaWRlci5jcmVhdGUoXG4gICAgICAgIHRoaXMuc2xpZGVyQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIGNvbmZpZ1xuICAgICAgKTtcblxuICAgICAgLy8gcmVnaXN0ZXIgbGlzdGVuIGV2ZW50c1xuICAgICAgdGhpcy5zbGlkZXJDb250YWluZXIubmF0aXZlRWxlbWVudC5ub1VpU2xpZGVyLm9uKFxuICAgICAgICAnY2hhbmdlJyxcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGNvbXBvbmVudCBpbm5lciBzdGF0ZVxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcblxuICAgIC8vIHVwZGF0ZSB0aGUgc2xpZGVyIHN0YXRlXG4gICAgY29uc3Qge1xuICAgICAgcmFuZ2U6IHsgbWluLCBtYXggfSxcbiAgICAgIHN0YXJ0LFxuICAgIH0gPSBzdGF0ZTtcblxuICAgIGNvbnN0IGRpc2FibGVkID0gbWluID09PSBtYXg7XG4gICAgY29uc3QgcmFuZ2UgPSBkaXNhYmxlZCA/IHsgbWluLCBtYXg6IG1heCArIDAuMDAwMSB9IDogeyBtaW4sIG1heCB9O1xuXG4gICAgdGhpcy5zbGlkZXIudXBkYXRlT3B0aW9ucyh7IGRpc2FibGVkLCByYW5nZSwgc3RhcnQgfSk7XG4gIH07XG5cbiAgcHVibGljIGhhbmRsZUNoYW5nZSA9ICh2YWx1ZXM6IHN0cmluZ1tdIHwgbnVtYmVyW10pID0+IHtcbiAgICB0aGlzLnN0YXRlLnJlZmluZSh2YWx1ZXMpO1xuICB9O1xuXG4gIHB1YmxpYyBmb3JtYXRUb29sdGlwID0gKHZhbHVlOiBudW1iZXIpID0+IHtcbiAgICByZXR1cm4gdmFsdWUudG9GaXhlZChwYXJzZU51bWJlcklucHV0KHRoaXMucHJlY2lzaW9uKSk7XG4gIH07XG59XG4iXX0=