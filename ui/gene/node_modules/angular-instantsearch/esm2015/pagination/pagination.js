/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const range = require('lodash/range');
import { Component, Input, Inject, forwardRef } from '@angular/core';
import { connectPagination } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { parseNumberInput, noop } from '../utils';
export class NgAisPagination extends BaseWidget {
    /**
     * @param {?} instantSearchParent
     */
    constructor(instantSearchParent) {
        super('Pagination');
        this.instantSearchParent = instantSearchParent;
        // render options
        this.showFirst = true;
        this.showLast = false;
        this.showPrevious = true;
        this.showNext = true;
        this.padding = 3;
        this.state = {
            createURL: noop,
            currentRefinement: 0,
            nbHits: 0,
            nbPages: 0,
            refine: noop,
        };
    }
    /**
     * @return {?}
     */
    get pages() {
        const { nbPages, currentRefinement } = this.state;
        /** @type {?} */
        const pagesArray = Array.apply(null, { length: nbPages }).map(Number.call, Number);
        /** @type {?} */
        const pagesPadding = typeof this.padding === 'string'
            ? parseInt(this.padding, 10)
            : this.padding;
        if (pagesPadding && pagesPadding > 0) {
            // should not display pages that does not exists
            if (nbPages < pagesPadding * 2 + 1) {
                return pagesArray;
            }
            /** @type {?} */
            const minDelta = currentRefinement - pagesPadding - 1;
            /** @type {?} */
            const maxDelta = currentRefinement + pagesPadding + 1;
            if (minDelta < 0) {
                return range(0, currentRefinement + pagesPadding + Math.abs(minDelta));
            }
            if (maxDelta > nbPages) {
                return range(currentRefinement - pagesPadding - (maxDelta - nbPages), nbPages);
            }
            return range(currentRefinement - pagesPadding, currentRefinement + pagesPadding + 1);
        }
        return pagesArray;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createWidget(connectPagination, {
            maxPages: parseNumberInput(this.totalPages),
        });
        super.ngOnInit();
    }
    /**
     * @param {?} event
     * @param {?} page
     * @return {?}
     */
    refine(event, page) {
        event.stopPropagation();
        event.preventDefault();
        if (page < 0 ||
            page === this.state.currentRefinement ||
            page >= this.state.nbPages) {
            return;
        }
        this.state.refine(page);
    }
}
NgAisPagination.decorators = [
    { type: Component, args: [{
                selector: 'ais-pagination',
                template: `
    <div [class]="cx()">
      <ul [class]="cx('list')">
        <li
          *ngIf="showFirst"
          (click)="refine($event, 0)"
          [class]="
            cx('item') +
            ' ' +
            cx('item', 'firstPage') +
            (state.currentRefinement === 0 ? ' ' + cx('item', 'disabled') : '')
          "
        >
          <a
            [href]="state.createURL(0)"
            [class]="cx('link')"
          >
            ‹‹
          </a>
        </li>

        <li
          *ngIf="showPrevious"
          (click)="refine($event, state.currentRefinement - 1)"
          [class]="
            cx('item') +
            ' ' +
            cx('item', 'previousPage') +
            (state.currentRefinement === 0 ? ' ' + cx('item', 'disabled') : '')
          "
        >
          <a
            [href]="state.createURL(state.currentRefinement - 1)"
            [class]="cx('link')"
          >
            ‹
          </a>
        </li>

        <li
          [class]="
            cx('item') +
            ' ' +
            cx('item', 'page') +
            (state.currentRefinement === page ? ' ' + cx('item', 'selected') : '')
          "
          *ngFor="let page of pages"
          (click)="refine($event, page)"
        >
          <a
            [class]="cx('link')"
            [href]="state.createURL(page)"
          >
            {{page + 1}}
          </a>
        </li>

        <li
          *ngIf="showNext"
          (click)="refine($event, state.currentRefinement + 1)"
          [class]="
            cx('item') +
            ' ' +
            cx('item', 'nextPage') +
            (state.currentRefinement + 1 === state.nbPages ? ' ' + cx('item', 'disabled') : '')
          "
        >
          <a
            [href]="state.createURL(state.currentRefinement + 1)"
            [class]="cx('link')"
          >
            ›
          </a>
        </li>

        <li
          *ngIf="showLast"
          (click)="refine($event, state.nbPages - 1)"
          [class]="
            cx('item') +
            ' ' +
            cx('item', 'lastPage') +
            (state.currentRefinement + 1 === state.nbPages ? ' ' + cx('item', 'disabled') : '')
          "
        >
          <a
            [href]="state.createURL(state.nbPages - 1)"
            [class]="cx('link')"
          >
            ››
          </a>
        </li>
      </ul>
    </div>
  `,
            },] },
];
/** @nocollapse */
NgAisPagination.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => NgAisInstantSearch),] }] }
];
NgAisPagination.propDecorators = {
    showFirst: [{ type: Input }],
    showLast: [{ type: Input }],
    showPrevious: [{ type: Input }],
    showNext: [{ type: Input }],
    padding: [{ type: Input }],
    totalPages: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgAisPagination.prototype.showFirst;
    /** @type {?} */
    NgAisPagination.prototype.showLast;
    /** @type {?} */
    NgAisPagination.prototype.showPrevious;
    /** @type {?} */
    NgAisPagination.prototype.showNext;
    /** @type {?} */
    NgAisPagination.prototype.padding;
    /** @type {?} */
    NgAisPagination.prototype.totalPages;
    /** @type {?} */
    NgAisPagination.prototype.state;
    /** @type {?} */
    NgAisPagination.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,