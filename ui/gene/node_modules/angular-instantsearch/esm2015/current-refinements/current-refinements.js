/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef } from '@angular/core';
import { connectCurrentRefinedValues } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { noop, capitalize } from '../utils';
export class NgAisCurrentRefinements extends BaseWidget {
    /**
     * @param {?} instantSearchParent
     */
    constructor(instantSearchParent) {
        super('CurrentRefinements');
        this.instantSearchParent = instantSearchParent;
        // render options
        this.clearRefinements = 'after';
        this.clearRefinementsLabel = 'Clear refinements';
        // connector options
        this.onlyListedAttributes = false;
        this.clearsQuery = false;
        this.attributes = [];
        this.state = {
            attributes: {},
            clearAllClick: noop,
            clearAllURL: noop,
            createURL: noop,
            refine: noop,
            refinements: [],
        };
    }
    /**
     * @return {?}
     */
    get isHidden() {
        return this.state.refinements.length === 0 && this.autoHideContainer;
    }
    /**
     * @return {?}
     */
    get refinements() {
        /** @type {?} */
        const items = typeof this.transformItems === 'function'
            ? this.transformItems(this.state.refinements)
            : this.state.refinements;
        // group refinements by category? (attributeName && type)
        return items.reduce((res, _a) => {
            var { type, attributeName } = _a, refinement = tslib_1.__rest(_a, ["type", "attributeName"]);
            /** @type {?} */
            const match = res.find(r => r.attributeName === attributeName && r.type === type);
            if (match) {
                match.items.push(Object.assign({ type, attributeName }, refinement));
            }
            else {
                res.push({
                    type,
                    attributeName,
                    label: capitalize(attributeName),
                    items: [Object.assign({ type, attributeName }, refinement)],
                });
            }
            return res;
        }, []);
    }
    /**
     * @return {?}
     */
    get json() {
        return JSON.stringify(this.refinements, null, 4);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createWidget(connectCurrentRefinedValues, {
            attributes: this.attributes,
            clearsQuery: this.clearsQuery,
            onlyListedAttributes: this.onlyListedAttributes,
        });
        super.ngOnInit();
    }
    /**
     * @param {?} event
     * @param {?} refinement
     * @return {?}
     */
    handleClick(event, refinement) {
        event.preventDefault();
        this.state.refine(refinement);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleClearAllClick(event) {
        event.preventDefault();
        this.state.clearAllClick();
    }
}
NgAisCurrentRefinements.decorators = [
    { type: Component, args: [{
                selector: 'ais-current-refinements',
                template: `
    <div
      [class]="cx()"
      *ngIf="!isHidden"
    >
      <button
        [class]="cx('reset')"
        (click)="handleClearAllClick($event)"
        *ngIf="clearRefinements === 'before' || clearRefinements === true">
        {{clearRefinementsLabel}}
      </button>

      <ul
        [class]="cx('list')"
        *ngFor="let refinement of refinements"
      >
        <li [class]="cx('item')">
          <span [class]="cx('label')">{{refinement.label}}:</span>

          <span
            [class]="cx('category')"
            *ngFor="let item of refinement.items"
          >
            <span [class]="cx('categoryLabel')">{{item.name}}</span>
            <button [class]="cx('delete')" (click)="handleClick($event, item)">âœ•</button>
          </span>
        </li>
      </ul>

      <button
        [class]="cx('reset')"
        (click)="handleClearAllClick($event)"
        *ngIf="clearRefinements === 'after'">
        {{clearRefinementsLabel}}
      </button>
    </div>
  `,
            },] },
];
/** @nocollapse */
NgAisCurrentRefinements.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => NgAisInstantSearch),] }] }
];
NgAisCurrentRefinements.propDecorators = {
    clearRefinements: [{ type: Input }],
    clearRefinementsLabel: [{ type: Input }],
    transformItems: [{ type: Input }],
    onlyListedAttributes: [{ type: Input }],
    clearsQuery: [{ type: Input }],
    attributes: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgAisCurrentRefinements.prototype.clearRefinements;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.clearRefinementsLabel;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.transformItems;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.onlyListedAttributes;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.clearsQuery;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.attributes;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.state;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,