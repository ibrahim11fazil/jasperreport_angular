/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as algoliasearchProxy from 'algoliasearch/index';
import * as encodeProxy from 'querystring-es3/encode';
import { VERSION } from './version';
// AOT + Rollup workaround
// https://github.com/rollup/rollup/issues/1267#issuecomment-296395734
/** @type {?} */
const algoliasearch = algoliasearchProxy.default || algoliasearchProxy;
/** @type {?} */
const encode = encodeProxy.default || encodeProxy;
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRAlgoliaClient({ httpClient, HttpHeaders, transferState, makeStateKey, }) {
    console.warn('`createSSRAlgoliaClient` is deprecated in favor of `createSSRSearchClient` to be plugged to `searchClient`.');
    return (_, appId, apiKey) => createSSRSearchClient({
        appId,
        apiKey,
        httpClient,
        HttpHeaders,
        transferState,
        makeStateKey,
    });
}
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRSearchClient({ appId, apiKey, httpClient, HttpHeaders, transferState, makeStateKey, }) {
    /** @type {?} */
    const client = algoliasearch(appId, apiKey, {});
    client.addAlgoliaAgent(`angular-instantsearch ${VERSION}`);
    client._request = (rawUrl, opts) => {
        /** @type {?} */
        let headers = new HttpHeaders();
        headers = headers.set('content-type', opts.method === 'POST'
            ? 'application/x-www-form-urlencoded'
            : 'application/json');
        headers = headers.set('accept', 'application/json');
        /** @type {?} */
        const url = rawUrl + (rawUrl.includes('?') ? '&' : '?') + encode(opts.headers);
        /** @type {?} */
        const transferStateKey = makeStateKey(`ngais(${opts.body})`);
        if (transferState.hasKey(transferStateKey)) {
            /** @type {?} */
            const resp = JSON.parse(transferState.get(transferStateKey, {}));
            return Promise.resolve({
                statusCode: resp.status,
                body: resp.body,
                headers: resp.headers,
            });
        }
        return new Promise((resolve, reject) => {
            httpClient
                .request(opts.method, url, {
                headers,
                body: opts.body,
                observe: 'response',
            })
                .subscribe(resp => {
                transferState.set(transferStateKey, JSON.stringify(resp));
                resolve({
                    statusCode: resp.status,
                    body: resp.body,
                    headers: resp.headers,
                });
            }, resp => reject({
                statusCode: resp.status,
                body: resp.body,
                headers: resp.headers,
            }));
        });
    };
    return client;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXNzci1hbGdvbGlhLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImNyZWF0ZS1zc3ItYWxnb2xpYS1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sS0FBSyxrQkFBa0IsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRCxPQUFPLEtBQUssV0FBVyxNQUFNLHdCQUF3QixDQUFDO0FBRXRELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7Ozs7TUFLOUIsYUFBYSxHQUFHLGtCQUFrQixDQUFDLE9BQU8sSUFBSSxrQkFBa0I7O01BQ2hFLE1BQU0sR0FBRyxXQUFXLENBQUMsT0FBTyxJQUFJLFdBQVc7Ozs7O0FBRWpELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxFQUNyQyxVQUFVLEVBQ1YsV0FBVyxFQUNYLGFBQWEsRUFDYixZQUFZLEdBQ2I7SUFDQyxPQUFPLENBQUMsSUFBSSxDQUNWLDZHQUE2RyxDQUM5RyxDQUFDO0lBRUYsT0FBTyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FDMUIscUJBQXFCLENBQUM7UUFDcEIsS0FBSztRQUNMLE1BQU07UUFDTixVQUFVO1FBQ1YsV0FBVztRQUNYLGFBQWE7UUFDYixZQUFZO0tBQ2IsQ0FBQyxDQUFDO0FBQ1AsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsRUFDcEMsS0FBSyxFQUNMLE1BQU0sRUFDTixVQUFVLEVBQ1YsV0FBVyxFQUNYLGFBQWEsRUFDYixZQUFZLEdBQ2I7O1VBQ08sTUFBTSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQztJQUMvQyxNQUFNLENBQUMsZUFBZSxDQUFDLHlCQUF5QixPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBRTNELE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7O1lBQzdCLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRTtRQUUvQixPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FDbkIsY0FBYyxFQUNkLElBQUksQ0FBQyxNQUFNLEtBQUssTUFBTTtZQUNwQixDQUFDLENBQUMsbUNBQW1DO1lBQ3JDLENBQUMsQ0FBQyxrQkFBa0IsQ0FDdkIsQ0FBQztRQUVGLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDOztjQUU5QyxHQUFHLEdBQ1AsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzs7Y0FFOUQsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDO1FBRTVELElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFOztrQkFDcEMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNoRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUM7Z0JBQ3JCLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTzthQUN0QixDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsVUFBVTtpQkFDUCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7Z0JBQ3pCLE9BQU87Z0JBQ1AsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLE9BQU8sRUFBRSxVQUFVO2FBQ3BCLENBQUM7aUJBQ0QsU0FBUyxDQUNSLElBQUksQ0FBQyxFQUFFO2dCQUNMLGFBQWEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUMxRCxPQUFPLENBQUM7b0JBQ04sVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNO29CQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7b0JBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2lCQUN0QixDQUFDLENBQUM7WUFDTCxDQUFDLEVBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FDTCxNQUFNLENBQUM7Z0JBQ0wsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNO2dCQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3RCLENBQUMsQ0FDTCxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYWxnb2xpYXNlYXJjaFByb3h5IGZyb20gJ2FsZ29saWFzZWFyY2gvaW5kZXgnO1xuaW1wb3J0ICogYXMgZW5jb2RlUHJveHkgZnJvbSAncXVlcnlzdHJpbmctZXMzL2VuY29kZSc7XG5cbmltcG9ydCB7IFZFUlNJT04gfSBmcm9tICcuL3ZlcnNpb24nO1xuXG4vLyBBT1QgKyBSb2xsdXAgd29ya2Fyb3VuZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzEyNjcjaXNzdWVjb21tZW50LTI5NjM5NTczNFxuXG5jb25zdCBhbGdvbGlhc2VhcmNoID0gYWxnb2xpYXNlYXJjaFByb3h5LmRlZmF1bHQgfHwgYWxnb2xpYXNlYXJjaFByb3h5O1xuY29uc3QgZW5jb2RlID0gZW5jb2RlUHJveHkuZGVmYXVsdCB8fCBlbmNvZGVQcm94eTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNTUkFsZ29saWFDbGllbnQoe1xuICBodHRwQ2xpZW50LFxuICBIdHRwSGVhZGVycyxcbiAgdHJhbnNmZXJTdGF0ZSxcbiAgbWFrZVN0YXRlS2V5LFxufSkge1xuICBjb25zb2xlLndhcm4oXG4gICAgJ2BjcmVhdGVTU1JBbGdvbGlhQ2xpZW50YCBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIGBjcmVhdGVTU1JTZWFyY2hDbGllbnRgIHRvIGJlIHBsdWdnZWQgdG8gYHNlYXJjaENsaWVudGAuJ1xuICApO1xuXG4gIHJldHVybiAoXywgYXBwSWQsIGFwaUtleSkgPT5cbiAgICBjcmVhdGVTU1JTZWFyY2hDbGllbnQoe1xuICAgICAgYXBwSWQsXG4gICAgICBhcGlLZXksXG4gICAgICBodHRwQ2xpZW50LFxuICAgICAgSHR0cEhlYWRlcnMsXG4gICAgICB0cmFuc2ZlclN0YXRlLFxuICAgICAgbWFrZVN0YXRlS2V5LFxuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU1NSU2VhcmNoQ2xpZW50KHtcbiAgYXBwSWQsXG4gIGFwaUtleSxcbiAgaHR0cENsaWVudCxcbiAgSHR0cEhlYWRlcnMsXG4gIHRyYW5zZmVyU3RhdGUsXG4gIG1ha2VTdGF0ZUtleSxcbn0pIHtcbiAgY29uc3QgY2xpZW50ID0gYWxnb2xpYXNlYXJjaChhcHBJZCwgYXBpS2V5LCB7fSk7XG4gIGNsaWVudC5hZGRBbGdvbGlhQWdlbnQoYGFuZ3VsYXItaW5zdGFudHNlYXJjaCAke1ZFUlNJT059YCk7XG5cbiAgY2xpZW50Ll9yZXF1ZXN0ID0gKHJhd1VybCwgb3B0cykgPT4ge1xuICAgIGxldCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG5cbiAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoXG4gICAgICAnY29udGVudC10eXBlJyxcbiAgICAgIG9wdHMubWV0aG9kID09PSAnUE9TVCdcbiAgICAgICAgPyAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICAgICAgICA6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICk7XG5cbiAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ2FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cbiAgICBjb25zdCB1cmwgPVxuICAgICAgcmF3VXJsICsgKHJhd1VybC5pbmNsdWRlcygnPycpID8gJyYnIDogJz8nKSArIGVuY29kZShvcHRzLmhlYWRlcnMpO1xuXG4gICAgY29uc3QgdHJhbnNmZXJTdGF0ZUtleSA9IG1ha2VTdGF0ZUtleShgbmdhaXMoJHtvcHRzLmJvZHl9KWApO1xuXG4gICAgaWYgKHRyYW5zZmVyU3RhdGUuaGFzS2V5KHRyYW5zZmVyU3RhdGVLZXkpKSB7XG4gICAgICBjb25zdCByZXNwID0gSlNPTi5wYXJzZSh0cmFuc2ZlclN0YXRlLmdldCh0cmFuc2ZlclN0YXRlS2V5LCB7fSkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIHN0YXR1c0NvZGU6IHJlc3Auc3RhdHVzLFxuICAgICAgICBib2R5OiByZXNwLmJvZHksXG4gICAgICAgIGhlYWRlcnM6IHJlc3AuaGVhZGVycyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBodHRwQ2xpZW50XG4gICAgICAgIC5yZXF1ZXN0KG9wdHMubWV0aG9kLCB1cmwsIHtcbiAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgIGJvZHk6IG9wdHMuYm9keSxcbiAgICAgICAgICBvYnNlcnZlOiAncmVzcG9uc2UnLFxuICAgICAgICB9KVxuICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgIHJlc3AgPT4ge1xuICAgICAgICAgICAgdHJhbnNmZXJTdGF0ZS5zZXQodHJhbnNmZXJTdGF0ZUtleSwgSlNPTi5zdHJpbmdpZnkocmVzcCkpO1xuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgIHN0YXR1c0NvZGU6IHJlc3Auc3RhdHVzLFxuICAgICAgICAgICAgICBib2R5OiByZXNwLmJvZHksXG4gICAgICAgICAgICAgIGhlYWRlcnM6IHJlc3AuaGVhZGVycyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzcCA9PlxuICAgICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcC5zdGF0dXMsXG4gICAgICAgICAgICAgIGJvZHk6IHJlc3AuYm9keSxcbiAgICAgICAgICAgICAgaGVhZGVyczogcmVzcC5oZWFkZXJzLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gY2xpZW50O1xufVxuIl19