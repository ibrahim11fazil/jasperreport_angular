/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef, KeyValueDiffers, } from '@angular/core';
import { connectConfigure } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch, } from '../instantsearch/instantsearch';
import { noop } from '../utils';
var NgAisConfigure = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisConfigure, _super);
    function NgAisConfigure(differs, instantSearchParent) {
        var _this = _super.call(this, 'Configure') || this;
        _this.differs = differs;
        _this.instantSearchParent = instantSearchParent;
        // SearchParameters (I don't know how to get the values of the type)
        _this.state = {
            refine: noop,
        };
        return _this;
    }
    Object.defineProperty(NgAisConfigure.prototype, "searchParameters", {
        set: /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            this.internalSearchParameters = values;
            if (!this.differ && values) {
                this.differ = this.differs.find(values).create();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgAisConfigure.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createWidget(connectConfigure, {
            searchParameters: this.internalSearchParameters,
        });
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @return {?}
     */
    NgAisConfigure.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.differ) {
            /** @type {?} */
            var changes = this.differ.diff(this.internalSearchParameters);
            if (changes) {
                this.state.refine(this.internalSearchParameters);
            }
        }
    };
    NgAisConfigure.decorators = [
        { type: Component, args: [{
                    selector: 'ais-configure',
                    template: '',
                },] },
    ];
    /** @nocollapse */
    NgAisConfigure.ctorParameters = function () { return [
        { type: KeyValueDiffers },
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisConfigure.propDecorators = {
        searchParameters: [{ type: Input }]
    };
    return NgAisConfigure;
}(BaseWidget));
export { NgAisConfigure };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgAisConfigure.prototype.internalSearchParameters;
    /**
     * @type {?}
     * @private
     */
    NgAisConfigure.prototype.differ;
    /** @type {?} */
    NgAisConfigure.prototype.state;
    /**
     * @type {?}
     * @private
     */
    NgAisConfigure.prototype.differs;
    /** @type {?} */
    NgAisConfigure.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoLyIsInNvdXJjZXMiOlsiY29uZmlndXJlL2NvbmZpZ3VyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixVQUFVLEVBRVYsZUFBZSxHQUVoQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUNMLGtCQUFrQixHQUVuQixNQUFNLGdDQUFnQyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFaEM7SUFJb0MsMENBQVU7SUFRNUMsd0JBQ1UsT0FBd0IsRUFFekIsbUJBQXdCO1FBSGpDLFlBS0Usa0JBQU0sV0FBVyxDQUFDLFNBQ25CO1FBTFMsYUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFFekIseUJBQW1CLEdBQW5CLG1CQUFtQixDQUFLOztRQVAxQixXQUFLLEdBQXlCO1lBQ25DLE1BQU0sRUFBRSxJQUFJO1NBQ2IsQ0FBQzs7SUFRRixDQUFDO0lBRUQsc0JBQ0ksNENBQWdCOzs7OztRQURwQixVQUNxQixNQUF3QjtZQUMzQyxJQUFJLENBQUMsd0JBQXdCLEdBQUcsTUFBTSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLE1BQU0sRUFBRTtnQkFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNsRDtRQUNILENBQUM7OztPQUFBOzs7O0lBRU0saUNBQVE7OztJQUFmO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNsQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsd0JBQXdCO1NBQ2hELENBQUMsQ0FBQztRQUNILGlCQUFNLFFBQVEsV0FBRSxDQUFDO0lBQ25CLENBQUM7Ozs7SUFFRCxrQ0FBUzs7O0lBQVQ7UUFDRSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7O2dCQUNULE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUM7WUFDL0QsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7YUFDbEQ7U0FDRjtJQUNILENBQUM7O2dCQTFDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFFBQVEsRUFBRSxFQUFFO2lCQUNiOzs7O2dCQWZDLGVBQWU7Z0RBMEJaLE1BQU0sU0FBQyxVQUFVLENBQUMsY0FBTSxPQUFBLGtCQUFrQixFQUFsQixDQUFrQixDQUFDOzs7bUNBTTdDLEtBQUs7O0lBdUJSLHFCQUFDO0NBQUEsQUEzQ0QsQ0FJb0MsVUFBVSxHQXVDN0M7U0F2Q1ksY0FBYzs7Ozs7O0lBQ3pCLGtEQUFtRDs7Ozs7SUFDbkQsZ0NBQTRDOztJQUU1QywrQkFFRTs7Ozs7SUFHQSxpQ0FBZ0M7O0lBQ2hDLDZDQUMrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIEluamVjdCxcbiAgZm9yd2FyZFJlZixcbiAgS2V5VmFsdWVEaWZmZXIsXG4gIEtleVZhbHVlRGlmZmVycyxcbiAgVGVzdGFiaWxpdHksXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb25uZWN0Q29uZmlndXJlIH0gZnJvbSAnaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzJztcbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tICcuLi9iYXNlLXdpZGdldCc7XG5pbXBvcnQge1xuICBOZ0Fpc0luc3RhbnRTZWFyY2gsXG4gIFNlYXJjaFBhcmFtZXRlcnMsXG59IGZyb20gJy4uL2luc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaCc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhaXMtY29uZmlndXJlJyxcbiAgdGVtcGxhdGU6ICcnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc0NvbmZpZ3VyZSBleHRlbmRzIEJhc2VXaWRnZXQge1xuICBwcml2YXRlIGludGVybmFsU2VhcmNoUGFyYW1ldGVyczogU2VhcmNoUGFyYW1ldGVycztcbiAgcHJpdmF0ZSBkaWZmZXI6IEtleVZhbHVlRGlmZmVyPHN0cmluZywgYW55PjsgLy8gU2VhcmNoUGFyYW1ldGVycyAoSSBkb24ndCBrbm93IGhvdyB0byBnZXQgdGhlIHZhbHVlcyBvZiB0aGUgdHlwZSlcblxuICBwdWJsaWMgc3RhdGU6IHsgcmVmaW5lOiBGdW5jdGlvbiB9ID0ge1xuICAgIHJlZmluZTogbm9vcCxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGRpZmZlcnM6IEtleVZhbHVlRGlmZmVycyxcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKCdDb25maWd1cmUnKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBzZWFyY2hQYXJhbWV0ZXJzKHZhbHVlczogU2VhcmNoUGFyYW1ldGVycykge1xuICAgIHRoaXMuaW50ZXJuYWxTZWFyY2hQYXJhbWV0ZXJzID0gdmFsdWVzO1xuICAgIGlmICghdGhpcy5kaWZmZXIgJiYgdmFsdWVzKSB7XG4gICAgICB0aGlzLmRpZmZlciA9IHRoaXMuZGlmZmVycy5maW5kKHZhbHVlcykuY3JlYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RDb25maWd1cmUsIHtcbiAgICAgIHNlYXJjaFBhcmFtZXRlcnM6IHRoaXMuaW50ZXJuYWxTZWFyY2hQYXJhbWV0ZXJzLFxuICAgIH0pO1xuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gIH1cblxuICBuZ0RvQ2hlY2soKSB7XG4gICAgaWYgKHRoaXMuZGlmZmVyKSB7XG4gICAgICBjb25zdCBjaGFuZ2VzID0gdGhpcy5kaWZmZXIuZGlmZih0aGlzLmludGVybmFsU2VhcmNoUGFyYW1ldGVycyk7XG4gICAgICBpZiAoY2hhbmdlcykge1xuICAgICAgICB0aGlzLnN0YXRlLnJlZmluZSh0aGlzLmludGVybmFsU2VhcmNoUGFyYW1ldGVycyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=