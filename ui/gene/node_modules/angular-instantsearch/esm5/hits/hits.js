/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Input, Component, ContentChild, TemplateRef, forwardRef, } from '@angular/core';
import { connectHits } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
var NgAisHits = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisHits, _super);
    function NgAisHits(instantSearchParent) {
        var _this = _super.call(this, 'Hits') || this;
        _this.instantSearchParent = instantSearchParent;
        // inner widget state returned from connector
        _this.state = { hits: [], results: {} };
        _this.updateState = function (state, isFirstRendering) {
            if (isFirstRendering)
                return;
            _this.state = tslib_1.__assign({}, state, { results: state.results, hits: typeof _this.transformItems === 'function'
                    ? _this.transformItems(state.hits)
                    : state.hits });
        };
        _this.createWidget(connectHits, { escapeHits: true });
        return _this;
    }
    NgAisHits.decorators = [
        { type: Component, args: [{
                    selector: 'ais-hits',
                    template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: state\"></ng-container>\n\n      <!-- default rendering if no template specified -->\n      <div *ngIf=\"!template\">\n        <ul [class]=\"cx('list')\">\n          <li\n            [class]=\"cx('item')\"\n            *ngFor=\"let hit of state.hits\"\n          >\n            <ais-highlight attribute=\"name\" [hit]=\"hit\">\n            </ais-highlight>\n          </li>\n        </ul>\n      </div>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    NgAisHits.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisHits.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        transformItems: [{ type: Input }]
    };
    return NgAisHits;
}(BaseWidget));
export { NgAisHits };
if (false) {
    /** @type {?} */
    NgAisHits.prototype.template;
    /** @type {?} */
    NgAisHits.prototype.transformItems;
    /** @type {?} */
    NgAisHits.prototype.state;
    /** @type {?} */
    NgAisHits.prototype.updateState;
    /** @type {?} */
    NgAisHits.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGl0cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImhpdHMvaGl0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxNQUFNLEVBQ04sS0FBSyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osV0FBVyxFQUNYLFVBQVUsR0FDWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDN0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRXBFO0lBcUIrQixxQ0FBVTtJQVN2QyxtQkFFUyxtQkFBd0I7UUFGakMsWUFJRSxrQkFBTSxNQUFNLENBQUMsU0FFZDtRQUpRLHlCQUFtQixHQUFuQixtQkFBbUIsQ0FBSzs7UUFKMUIsV0FBSyxHQUFnQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBVXRFLGlCQUFXLEdBQUcsVUFBQyxLQUFLLEVBQUUsZ0JBQXlCO1lBQzdDLElBQUksZ0JBQWdCO2dCQUFFLE9BQU87WUFFN0IsS0FBSSxDQUFDLEtBQUssd0JBQ0wsS0FBSyxJQUNSLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUN0QixJQUFJLEVBQ0YsT0FBTyxLQUFJLENBQUMsY0FBYyxLQUFLLFVBQVU7b0JBQ3ZDLENBQUMsQ0FBQyxLQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7b0JBQ2pDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUNqQixDQUFDO1FBQ0osQ0FBQyxDQUFDO1FBZEEsS0FBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzs7SUFDdkQsQ0FBQzs7Z0JBcENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsUUFBUSxFQUFFLDZmQWlCVDtpQkFDRjs7OztnREFXSSxNQUFNLFNBQUMsVUFBVSxDQUFDLGNBQU0sT0FBQSxrQkFBa0IsRUFBbEIsQ0FBa0IsQ0FBQzs7OzJCQVQ3QyxZQUFZLFNBQUMsV0FBVztpQ0FHeEIsS0FBSzs7SUF5QlIsZ0JBQUM7Q0FBQSxBQWxERCxDQXFCK0IsVUFBVSxHQTZCeEM7U0E3QlksU0FBUzs7O0lBQ3BCLDZCQUE4RDs7SUFHOUQsbUNBQW1DOztJQUduQywwQkFBc0U7O0lBVXRFLGdDQVdFOztJQWxCQSx3Q0FDK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBJbmplY3QsXG4gIElucHV0LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgVGVtcGxhdGVSZWYsXG4gIGZvcndhcmRSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb25uZWN0SGl0cyB9IGZyb20gJ2luc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9ycyc7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSAnLi4vYmFzZS13aWRnZXQnO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoIH0gZnJvbSAnLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWlzLWhpdHMnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW2NsYXNzXT1cImN4KClcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZTsgY29udGV4dDogc3RhdGVcIj48L25nLWNvbnRhaW5lcj5cblxuICAgICAgPCEtLSBkZWZhdWx0IHJlbmRlcmluZyBpZiBubyB0ZW1wbGF0ZSBzcGVjaWZpZWQgLS0+XG4gICAgICA8ZGl2ICpuZ0lmPVwiIXRlbXBsYXRlXCI+XG4gICAgICAgIDx1bCBbY2xhc3NdPVwiY3goJ2xpc3QnKVwiPlxuICAgICAgICAgIDxsaVxuICAgICAgICAgICAgW2NsYXNzXT1cImN4KCdpdGVtJylcIlxuICAgICAgICAgICAgKm5nRm9yPVwibGV0IGhpdCBvZiBzdGF0ZS5oaXRzXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8YWlzLWhpZ2hsaWdodCBhdHRyaWJ1dGU9XCJuYW1lXCIgW2hpdF09XCJoaXRcIj5cbiAgICAgICAgICAgIDwvYWlzLWhpZ2hsaWdodD5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzSGl0cyBleHRlbmRzIEJhc2VXaWRnZXQge1xuICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmKSBwdWJsaWMgdGVtcGxhdGU/OiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIC8vIHJlbmRlciBvcHRpb25zXG4gIEBJbnB1dCgpIHRyYW5zZm9ybUl0ZW1zPzogRnVuY3Rpb247XG5cbiAgLy8gaW5uZXIgd2lkZ2V0IHN0YXRlIHJldHVybmVkIGZyb20gY29ubmVjdG9yXG4gIHB1YmxpYyBzdGF0ZTogeyBoaXRzOiB7fVtdOyByZXN1bHRzOiB7fSB9ID0geyBoaXRzOiBbXSwgcmVzdWx0czoge30gfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKCdIaXRzJyk7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoY29ubmVjdEhpdHMsIHsgZXNjYXBlSGl0czogdHJ1ZSB9KTtcbiAgfVxuXG4gIHVwZGF0ZVN0YXRlID0gKHN0YXRlLCBpc0ZpcnN0UmVuZGVyaW5nOiBib29sZWFuKSA9PiB7XG4gICAgaWYgKGlzRmlyc3RSZW5kZXJpbmcpIHJldHVybjtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAuLi5zdGF0ZSxcbiAgICAgIHJlc3VsdHM6IHN0YXRlLnJlc3VsdHMsXG4gICAgICBoaXRzOlxuICAgICAgICB0eXBlb2YgdGhpcy50cmFuc2Zvcm1JdGVtcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgID8gdGhpcy50cmFuc2Zvcm1JdGVtcyhzdGF0ZS5oaXRzKVxuICAgICAgICAgIDogc3RhdGUuaGl0cyxcbiAgICB9O1xuICB9O1xufVxuIl19