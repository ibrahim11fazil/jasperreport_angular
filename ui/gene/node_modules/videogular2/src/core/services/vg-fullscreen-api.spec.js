"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var vg_fullscreen_api_1 = require("./vg-fullscreen-api");
var vg_utils_1 = require("./vg-utils");
describe('Videogular Player', function () {
    var medias;
    var elem;
    var fsAPI;
    beforeEach(function () {
        medias = new core_1.QueryList();
        elem = document.createElement('video');
        fsAPI = new vg_fullscreen_api_1.VgFullscreenAPI();
        fsAPI.isAvailable = true;
        fsAPI.nativeFullscreen = true;
        fsAPI.init(elem, medias);
    });
    it('Should create polyfills on init', function () {
        expect(fsAPI.polyfill.enabled).toBe('fullscreenEnabled');
        expect(fsAPI.polyfill.element).toBe('fullscreenElement');
        expect(fsAPI.polyfill.request).toBe('requestFullscreen');
        expect(fsAPI.polyfill.exit).toBe('exitFullscreen');
        expect(fsAPI.polyfill.onchange).toBe('fullscreenchange');
        expect(fsAPI.polyfill.onerror).toBe('fullscreenerror');
    });
    it('Should request an element to enter in fullscreen mode (desktop)', function () {
        spyOn(fsAPI, 'enterElementInFullScreen').and.callFake(function () { });
        fsAPI.request(null);
        expect(fsAPI.isFullscreen).toBeTruthy();
        expect(fsAPI.enterElementInFullScreen).toHaveBeenCalledWith(elem);
    });
    it('Should request an element to enter in fullscreen mode (mobile)', function () {
        spyOn(vg_utils_1.VgUtils, 'isMobileDevice').and.callFake(function () { return true; });
        spyOn(fsAPI, 'enterElementInFullScreen').and.callFake(function () { });
        fsAPI.request(null);
        expect(fsAPI.isFullscreen).toBeTruthy();
        expect(vg_utils_1.VgUtils.isMobileDevice).toHaveBeenCalled();
        expect(fsAPI.enterElementInFullScreen).toHaveBeenCalledWith(elem);
    });
    it('Should request an element to enter in fullscreen mode (mobile with param elem)', function () {
        spyOn(vg_utils_1.VgUtils, 'isMobileDevice').and.callFake(function () { return true; });
        spyOn(fsAPI, 'enterElementInFullScreen').and.callFake(function () { });
        fsAPI.request(elem);
        expect(fsAPI.isFullscreen).toBeTruthy();
        expect(vg_utils_1.VgUtils.isMobileDevice).toHaveBeenCalled();
        expect(fsAPI.enterElementInFullScreen).toHaveBeenCalledWith(elem);
    });
    it('Should not request an element to enter in fullscreen mode', function () {
        spyOn(fsAPI, 'enterElementInFullScreen').and.callFake(function () { });
        fsAPI.nativeFullscreen = false;
        fsAPI.request(elem);
        expect(fsAPI.enterElementInFullScreen).not.toHaveBeenCalled();
    });
    it('Should enter in fullscreen mode', function () {
        spyOn(elem, 'requestFullscreen').and.callThrough();
        fsAPI.enterElementInFullScreen(elem);
        expect(elem.requestFullscreen).toHaveBeenCalled();
    });
    it('Should request an element to exit from fullscreen mode (native)', function () {
        fsAPI.polyfill.exit = 'mockedExitFunction';
        document.mockedExitFunction = function () { };
        spyOn(document, 'mockedExitFunction').and.callThrough();
        fsAPI.exit();
        expect(fsAPI.isFullscreen).toBeFalsy();
        expect(document.mockedExitFunction).toHaveBeenCalled();
    });
    it('Should request an element to exit from fullscreen mode (emulated)', function () {
        fsAPI.polyfill.exit = 'mockedExitFunction';
        document.mockedExitFunction = function () { };
        spyOn(document, 'mockedExitFunction').and.callThrough();
        fsAPI.nativeFullscreen = false;
        fsAPI.exit();
        expect(fsAPI.isFullscreen).toBeFalsy();
        expect(document.mockedExitFunction).not.toHaveBeenCalled();
    });
    it('Should enter videogular element to fullscreen mode', function () {
        fsAPI.videogularElement = { id: 'vgElem' };
        spyOn(fsAPI, 'request').and.callFake(function () { });
        fsAPI.toggleFullscreen();
        expect(fsAPI.request).toHaveBeenCalledWith(null);
    });
    it('Should enter other element to fullscreen mode', function () {
        var element = { id: 'main' };
        fsAPI.videogularElement = { id: 'vgElem' };
        spyOn(fsAPI, 'request').and.callFake(function () { });
        fsAPI.toggleFullscreen(element);
        expect(fsAPI.request).toHaveBeenCalledWith(element);
    });
    it('Should exit from fullscreen mode', function () {
        fsAPI.isFullscreen = true;
        spyOn(fsAPI, 'exit').and.callFake(function () { });
        fsAPI.toggleFullscreen();
        expect(fsAPI.exit).toHaveBeenCalled();
    });
});

//# sourceMappingURL=data:application/json;base64,